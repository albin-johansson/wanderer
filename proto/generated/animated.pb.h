// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: animated.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_animated_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_animated_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_animated_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_animated_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_animated_2eproto;
namespace wanderer {
namespace protobuf {
class animated;
struct animatedDefaultTypeInternal;
extern animatedDefaultTypeInternal _animated_default_instance_;
}  // namespace protobuf
}  // namespace wanderer
PROTOBUF_NAMESPACE_OPEN
template<> ::wanderer::protobuf::animated* Arena::CreateMaybeMessage<::wanderer::protobuf::animated>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace wanderer {
namespace protobuf {

// ===================================================================

class animated final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wanderer.protobuf.animated) */ {
 public:
  inline animated() : animated(nullptr) {}
  ~animated() override;
  explicit constexpr animated(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  animated(const animated& from);
  animated(animated&& from) noexcept
    : animated() {
    *this = ::std::move(from);
  }

  inline animated& operator=(const animated& from) {
    CopyFrom(from);
    return *this;
  }
  inline animated& operator=(animated&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const animated& default_instance() {
    return *internal_default_instance();
  }
  static inline const animated* internal_default_instance() {
    return reinterpret_cast<const animated*>(
               &_animated_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(animated& a, animated& b) {
    a.Swap(&b);
  }
  inline void Swap(animated* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(animated* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline animated* New() const final {
    return new animated();
  }

  animated* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<animated>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const animated& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const animated& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(animated* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wanderer.protobuf.animated";
  }
  protected:
  explicit animated(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameFieldNumber = 1,
    kFrameCountFieldNumber = 2,
    kThenFieldNumber = 3,
    kDelayFieldNumber = 4,
  };
  // optional uint64 frame = 1;
  bool has_frame() const;
  private:
  bool _internal_has_frame() const;
  public:
  void clear_frame();
  ::PROTOBUF_NAMESPACE_ID::uint64 frame() const;
  void set_frame(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_frame() const;
  void _internal_set_frame(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 frame_count = 2;
  bool has_frame_count() const;
  private:
  bool _internal_has_frame_count() const;
  public:
  void clear_frame_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_count() const;
  void set_frame_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_frame_count() const;
  void _internal_set_frame_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 then = 3;
  bool has_then() const;
  private:
  bool _internal_has_then() const;
  public:
  void clear_then();
  ::PROTOBUF_NAMESPACE_ID::uint32 then() const;
  void set_then(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_then() const;
  void _internal_set_then(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 delay = 4;
  bool has_delay() const;
  private:
  bool _internal_has_delay() const;
  public:
  void clear_delay();
  ::PROTOBUF_NAMESPACE_ID::uint32 delay() const;
  void set_delay(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_delay() const;
  void _internal_set_delay(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:wanderer.protobuf.animated)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_;
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 then_;
  ::PROTOBUF_NAMESPACE_ID::uint32 delay_;
  friend struct ::TableStruct_animated_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// animated

// optional uint64 frame = 1;
inline bool animated::_internal_has_frame() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool animated::has_frame() const {
  return _internal_has_frame();
}
inline void animated::clear_frame() {
  frame_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 animated::_internal_frame() const {
  return frame_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 animated::frame() const {
  // @@protoc_insertion_point(field_get:wanderer.protobuf.animated.frame)
  return _internal_frame();
}
inline void animated::_internal_set_frame(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  frame_ = value;
}
inline void animated::set_frame(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_frame(value);
  // @@protoc_insertion_point(field_set:wanderer.protobuf.animated.frame)
}

// optional uint64 frame_count = 2;
inline bool animated::_internal_has_frame_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool animated::has_frame_count() const {
  return _internal_has_frame_count();
}
inline void animated::clear_frame_count() {
  frame_count_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 animated::_internal_frame_count() const {
  return frame_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 animated::frame_count() const {
  // @@protoc_insertion_point(field_get:wanderer.protobuf.animated.frame_count)
  return _internal_frame_count();
}
inline void animated::_internal_set_frame_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  frame_count_ = value;
}
inline void animated::set_frame_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_frame_count(value);
  // @@protoc_insertion_point(field_set:wanderer.protobuf.animated.frame_count)
}

// optional uint32 then = 3;
inline bool animated::_internal_has_then() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool animated::has_then() const {
  return _internal_has_then();
}
inline void animated::clear_then() {
  then_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 animated::_internal_then() const {
  return then_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 animated::then() const {
  // @@protoc_insertion_point(field_get:wanderer.protobuf.animated.then)
  return _internal_then();
}
inline void animated::_internal_set_then(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  then_ = value;
}
inline void animated::set_then(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_then(value);
  // @@protoc_insertion_point(field_set:wanderer.protobuf.animated.then)
}

// optional uint32 delay = 4;
inline bool animated::_internal_has_delay() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool animated::has_delay() const {
  return _internal_has_delay();
}
inline void animated::clear_delay() {
  delay_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 animated::_internal_delay() const {
  return delay_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 animated::delay() const {
  // @@protoc_insertion_point(field_get:wanderer.protobuf.animated.delay)
  return _internal_delay();
}
inline void animated::_internal_set_delay(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  delay_ = value;
}
inline void animated::set_delay(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_delay(value);
  // @@protoc_insertion_point(field_set:wanderer.protobuf.animated.delay)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace wanderer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_animated_2eproto
