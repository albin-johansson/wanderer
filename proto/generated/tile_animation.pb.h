// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tile_animation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tile_5fanimation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tile_5fanimation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tile_5fanimation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tile_5fanimation_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tile_5fanimation_2eproto;
namespace wanderer {
namespace protobuf {
class tile_animation;
struct tile_animationDefaultTypeInternal;
extern tile_animationDefaultTypeInternal _tile_animation_default_instance_;
class tile_animation_frame;
struct tile_animation_frameDefaultTypeInternal;
extern tile_animation_frameDefaultTypeInternal _tile_animation_frame_default_instance_;
}  // namespace protobuf
}  // namespace wanderer
PROTOBUF_NAMESPACE_OPEN
template<> ::wanderer::protobuf::tile_animation* Arena::CreateMaybeMessage<::wanderer::protobuf::tile_animation>(Arena*);
template<> ::wanderer::protobuf::tile_animation_frame* Arena::CreateMaybeMessage<::wanderer::protobuf::tile_animation_frame>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace wanderer {
namespace protobuf {

// ===================================================================

class tile_animation_frame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wanderer.protobuf.tile_animation.frame) */ {
 public:
  inline tile_animation_frame() : tile_animation_frame(nullptr) {}
  ~tile_animation_frame() override;
  explicit constexpr tile_animation_frame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  tile_animation_frame(const tile_animation_frame& from);
  tile_animation_frame(tile_animation_frame&& from) noexcept
    : tile_animation_frame() {
    *this = ::std::move(from);
  }

  inline tile_animation_frame& operator=(const tile_animation_frame& from) {
    CopyFrom(from);
    return *this;
  }
  inline tile_animation_frame& operator=(tile_animation_frame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const tile_animation_frame& default_instance() {
    return *internal_default_instance();
  }
  static inline const tile_animation_frame* internal_default_instance() {
    return reinterpret_cast<const tile_animation_frame*>(
               &_tile_animation_frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(tile_animation_frame& a, tile_animation_frame& b) {
    a.Swap(&b);
  }
  inline void Swap(tile_animation_frame* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(tile_animation_frame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline tile_animation_frame* New() const final {
    return new tile_animation_frame();
  }

  tile_animation_frame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<tile_animation_frame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const tile_animation_frame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const tile_animation_frame& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(tile_animation_frame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wanderer.protobuf.tile_animation.frame";
  }
  protected:
  explicit tile_animation_frame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTileIdFieldNumber = 1,
    kDurationFieldNumber = 2,
  };
  // optional uint32 tile_id = 1;
  bool has_tile_id() const;
  private:
  bool _internal_has_tile_id() const;
  public:
  void clear_tile_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 tile_id() const;
  void set_tile_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tile_id() const;
  void _internal_set_tile_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 duration = 2;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::uint32 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:wanderer.protobuf.tile_animation.frame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tile_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 duration_;
  friend struct ::TableStruct_tile_5fanimation_2eproto;
};
// -------------------------------------------------------------------

class tile_animation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wanderer.protobuf.tile_animation) */ {
 public:
  inline tile_animation() : tile_animation(nullptr) {}
  ~tile_animation() override;
  explicit constexpr tile_animation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  tile_animation(const tile_animation& from);
  tile_animation(tile_animation&& from) noexcept
    : tile_animation() {
    *this = ::std::move(from);
  }

  inline tile_animation& operator=(const tile_animation& from) {
    CopyFrom(from);
    return *this;
  }
  inline tile_animation& operator=(tile_animation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const tile_animation& default_instance() {
    return *internal_default_instance();
  }
  static inline const tile_animation* internal_default_instance() {
    return reinterpret_cast<const tile_animation*>(
               &_tile_animation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(tile_animation& a, tile_animation& b) {
    a.Swap(&b);
  }
  inline void Swap(tile_animation* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(tile_animation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline tile_animation* New() const final {
    return new tile_animation();
  }

  tile_animation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<tile_animation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const tile_animation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const tile_animation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(tile_animation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wanderer.protobuf.tile_animation";
  }
  protected:
  explicit tile_animation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef tile_animation_frame frame;

  // accessors -------------------------------------------------------

  enum : int {
    kFramesFieldNumber = 3,
    kIndexFieldNumber = 1,
    kThenFieldNumber = 2,
  };
  // repeated .wanderer.protobuf.tile_animation.frame frames = 3;
  int frames_size() const;
  private:
  int _internal_frames_size() const;
  public:
  void clear_frames();
  ::wanderer::protobuf::tile_animation_frame* mutable_frames(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wanderer::protobuf::tile_animation_frame >*
      mutable_frames();
  private:
  const ::wanderer::protobuf::tile_animation_frame& _internal_frames(int index) const;
  ::wanderer::protobuf::tile_animation_frame* _internal_add_frames();
  public:
  const ::wanderer::protobuf::tile_animation_frame& frames(int index) const;
  ::wanderer::protobuf::tile_animation_frame* add_frames();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wanderer::protobuf::tile_animation_frame >&
      frames() const;

  // optional uint64 index = 1;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 then = 2;
  bool has_then() const;
  private:
  bool _internal_has_then() const;
  public:
  void clear_then();
  ::PROTOBUF_NAMESPACE_ID::uint32 then() const;
  void set_then(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_then() const;
  void _internal_set_then(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:wanderer.protobuf.tile_animation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wanderer::protobuf::tile_animation_frame > frames_;
  ::PROTOBUF_NAMESPACE_ID::uint64 index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 then_;
  friend struct ::TableStruct_tile_5fanimation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// tile_animation_frame

// optional uint32 tile_id = 1;
inline bool tile_animation_frame::_internal_has_tile_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool tile_animation_frame::has_tile_id() const {
  return _internal_has_tile_id();
}
inline void tile_animation_frame::clear_tile_id() {
  tile_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 tile_animation_frame::_internal_tile_id() const {
  return tile_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 tile_animation_frame::tile_id() const {
  // @@protoc_insertion_point(field_get:wanderer.protobuf.tile_animation.frame.tile_id)
  return _internal_tile_id();
}
inline void tile_animation_frame::_internal_set_tile_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  tile_id_ = value;
}
inline void tile_animation_frame::set_tile_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tile_id(value);
  // @@protoc_insertion_point(field_set:wanderer.protobuf.tile_animation.frame.tile_id)
}

// optional uint32 duration = 2;
inline bool tile_animation_frame::_internal_has_duration() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool tile_animation_frame::has_duration() const {
  return _internal_has_duration();
}
inline void tile_animation_frame::clear_duration() {
  duration_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 tile_animation_frame::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 tile_animation_frame::duration() const {
  // @@protoc_insertion_point(field_get:wanderer.protobuf.tile_animation.frame.duration)
  return _internal_duration();
}
inline void tile_animation_frame::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  duration_ = value;
}
inline void tile_animation_frame::set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:wanderer.protobuf.tile_animation.frame.duration)
}

// -------------------------------------------------------------------

// tile_animation

// optional uint64 index = 1;
inline bool tile_animation::_internal_has_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool tile_animation::has_index() const {
  return _internal_has_index();
}
inline void tile_animation::clear_index() {
  index_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 tile_animation::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 tile_animation::index() const {
  // @@protoc_insertion_point(field_get:wanderer.protobuf.tile_animation.index)
  return _internal_index();
}
inline void tile_animation::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  index_ = value;
}
inline void tile_animation::set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:wanderer.protobuf.tile_animation.index)
}

// optional uint32 then = 2;
inline bool tile_animation::_internal_has_then() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool tile_animation::has_then() const {
  return _internal_has_then();
}
inline void tile_animation::clear_then() {
  then_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 tile_animation::_internal_then() const {
  return then_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 tile_animation::then() const {
  // @@protoc_insertion_point(field_get:wanderer.protobuf.tile_animation.then)
  return _internal_then();
}
inline void tile_animation::_internal_set_then(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  then_ = value;
}
inline void tile_animation::set_then(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_then(value);
  // @@protoc_insertion_point(field_set:wanderer.protobuf.tile_animation.then)
}

// repeated .wanderer.protobuf.tile_animation.frame frames = 3;
inline int tile_animation::_internal_frames_size() const {
  return frames_.size();
}
inline int tile_animation::frames_size() const {
  return _internal_frames_size();
}
inline void tile_animation::clear_frames() {
  frames_.Clear();
}
inline ::wanderer::protobuf::tile_animation_frame* tile_animation::mutable_frames(int index) {
  // @@protoc_insertion_point(field_mutable:wanderer.protobuf.tile_animation.frames)
  return frames_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wanderer::protobuf::tile_animation_frame >*
tile_animation::mutable_frames() {
  // @@protoc_insertion_point(field_mutable_list:wanderer.protobuf.tile_animation.frames)
  return &frames_;
}
inline const ::wanderer::protobuf::tile_animation_frame& tile_animation::_internal_frames(int index) const {
  return frames_.Get(index);
}
inline const ::wanderer::protobuf::tile_animation_frame& tile_animation::frames(int index) const {
  // @@protoc_insertion_point(field_get:wanderer.protobuf.tile_animation.frames)
  return _internal_frames(index);
}
inline ::wanderer::protobuf::tile_animation_frame* tile_animation::_internal_add_frames() {
  return frames_.Add();
}
inline ::wanderer::protobuf::tile_animation_frame* tile_animation::add_frames() {
  ::wanderer::protobuf::tile_animation_frame* _add = _internal_add_frames();
  // @@protoc_insertion_point(field_add:wanderer.protobuf.tile_animation.frames)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wanderer::protobuf::tile_animation_frame >&
tile_animation::frames() const {
  // @@protoc_insertion_point(field_list:wanderer.protobuf.tile_animation.frames)
  return frames_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace wanderer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tile_5fanimation_2eproto
