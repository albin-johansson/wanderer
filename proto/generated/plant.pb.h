// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: plant.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_plant_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_plant_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_plant_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_plant_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_plant_2eproto;
namespace wanderer {
namespace protobuf {
class plant;
struct plantDefaultTypeInternal;
extern plantDefaultTypeInternal _plant_default_instance_;
}  // namespace protobuf
}  // namespace wanderer
PROTOBUF_NAMESPACE_OPEN
template<> ::wanderer::protobuf::plant* Arena::CreateMaybeMessage<::wanderer::protobuf::plant>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace wanderer {
namespace protobuf {

// ===================================================================

class plant final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wanderer.protobuf.plant) */ {
 public:
  inline plant() : plant(nullptr) {}
  ~plant() override;
  explicit constexpr plant(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  plant(const plant& from);
  plant(plant&& from) noexcept
    : plant() {
    *this = ::std::move(from);
  }

  inline plant& operator=(const plant& from) {
    CopyFrom(from);
    return *this;
  }
  inline plant& operator=(plant&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const plant& default_instance() {
    return *internal_default_instance();
  }
  static inline const plant* internal_default_instance() {
    return reinterpret_cast<const plant*>(
               &_plant_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(plant& a, plant& b) {
    a.Swap(&b);
  }
  inline void Swap(plant* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(plant* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline plant* New() const final {
    return new plant();
  }

  plant* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<plant>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const plant& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const plant& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(plant* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wanderer.protobuf.plant";
  }
  protected:
  explicit plant(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTilesFieldNumber = 6,
    kTallTilesFieldNumber = 7,
    kCurrentGrowthFieldNumber = 1,
    kRateFieldNumber = 2,
    kBaseYFieldNumber = 3,
    kTileHeightFieldNumber = 4,
    kIndexFieldNumber = 5,
  };
  // repeated uint32 tiles = 6 [packed = true];
  int tiles_size() const;
  private:
  int _internal_tiles_size() const;
  public:
  void clear_tiles();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tiles(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_tiles() const;
  void _internal_add_tiles(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_tiles();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 tiles(int index) const;
  void set_tiles(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_tiles(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      tiles() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_tiles();

  // repeated uint32 tall_tiles = 7 [packed = true];
  int tall_tiles_size() const;
  private:
  int _internal_tall_tiles_size() const;
  public:
  void clear_tall_tiles();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tall_tiles(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_tall_tiles() const;
  void _internal_add_tall_tiles(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_tall_tiles();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 tall_tiles(int index) const;
  void set_tall_tiles(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_tall_tiles(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      tall_tiles() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_tall_tiles();

  // optional float current_growth = 1;
  bool has_current_growth() const;
  private:
  bool _internal_has_current_growth() const;
  public:
  void clear_current_growth();
  float current_growth() const;
  void set_current_growth(float value);
  private:
  float _internal_current_growth() const;
  void _internal_set_current_growth(float value);
  public:

  // optional float rate = 2;
  bool has_rate() const;
  private:
  bool _internal_has_rate() const;
  public:
  void clear_rate();
  float rate() const;
  void set_rate(float value);
  private:
  float _internal_rate() const;
  void _internal_set_rate(float value);
  public:

  // optional float base_y = 3;
  bool has_base_y() const;
  private:
  bool _internal_has_base_y() const;
  public:
  void clear_base_y();
  float base_y() const;
  void set_base_y(float value);
  private:
  float _internal_base_y() const;
  void _internal_set_base_y(float value);
  public:

  // optional int32 tile_height = 4;
  bool has_tile_height() const;
  private:
  bool _internal_has_tile_height() const;
  public:
  void clear_tile_height();
  ::PROTOBUF_NAMESPACE_ID::int32 tile_height() const;
  void set_tile_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tile_height() const;
  void _internal_set_tile_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint64 index = 5;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:wanderer.protobuf.plant)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > tiles_;
  mutable std::atomic<int> _tiles_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > tall_tiles_;
  mutable std::atomic<int> _tall_tiles_cached_byte_size_;
  float current_growth_;
  float rate_;
  float base_y_;
  ::PROTOBUF_NAMESPACE_ID::int32 tile_height_;
  ::PROTOBUF_NAMESPACE_ID::uint64 index_;
  friend struct ::TableStruct_plant_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// plant

// optional float current_growth = 1;
inline bool plant::_internal_has_current_growth() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool plant::has_current_growth() const {
  return _internal_has_current_growth();
}
inline void plant::clear_current_growth() {
  current_growth_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float plant::_internal_current_growth() const {
  return current_growth_;
}
inline float plant::current_growth() const {
  // @@protoc_insertion_point(field_get:wanderer.protobuf.plant.current_growth)
  return _internal_current_growth();
}
inline void plant::_internal_set_current_growth(float value) {
  _has_bits_[0] |= 0x00000001u;
  current_growth_ = value;
}
inline void plant::set_current_growth(float value) {
  _internal_set_current_growth(value);
  // @@protoc_insertion_point(field_set:wanderer.protobuf.plant.current_growth)
}

// optional float rate = 2;
inline bool plant::_internal_has_rate() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool plant::has_rate() const {
  return _internal_has_rate();
}
inline void plant::clear_rate() {
  rate_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float plant::_internal_rate() const {
  return rate_;
}
inline float plant::rate() const {
  // @@protoc_insertion_point(field_get:wanderer.protobuf.plant.rate)
  return _internal_rate();
}
inline void plant::_internal_set_rate(float value) {
  _has_bits_[0] |= 0x00000002u;
  rate_ = value;
}
inline void plant::set_rate(float value) {
  _internal_set_rate(value);
  // @@protoc_insertion_point(field_set:wanderer.protobuf.plant.rate)
}

// optional float base_y = 3;
inline bool plant::_internal_has_base_y() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool plant::has_base_y() const {
  return _internal_has_base_y();
}
inline void plant::clear_base_y() {
  base_y_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float plant::_internal_base_y() const {
  return base_y_;
}
inline float plant::base_y() const {
  // @@protoc_insertion_point(field_get:wanderer.protobuf.plant.base_y)
  return _internal_base_y();
}
inline void plant::_internal_set_base_y(float value) {
  _has_bits_[0] |= 0x00000004u;
  base_y_ = value;
}
inline void plant::set_base_y(float value) {
  _internal_set_base_y(value);
  // @@protoc_insertion_point(field_set:wanderer.protobuf.plant.base_y)
}

// optional int32 tile_height = 4;
inline bool plant::_internal_has_tile_height() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool plant::has_tile_height() const {
  return _internal_has_tile_height();
}
inline void plant::clear_tile_height() {
  tile_height_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 plant::_internal_tile_height() const {
  return tile_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 plant::tile_height() const {
  // @@protoc_insertion_point(field_get:wanderer.protobuf.plant.tile_height)
  return _internal_tile_height();
}
inline void plant::_internal_set_tile_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  tile_height_ = value;
}
inline void plant::set_tile_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tile_height(value);
  // @@protoc_insertion_point(field_set:wanderer.protobuf.plant.tile_height)
}

// optional uint64 index = 5;
inline bool plant::_internal_has_index() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool plant::has_index() const {
  return _internal_has_index();
}
inline void plant::clear_index() {
  index_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 plant::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 plant::index() const {
  // @@protoc_insertion_point(field_get:wanderer.protobuf.plant.index)
  return _internal_index();
}
inline void plant::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  index_ = value;
}
inline void plant::set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:wanderer.protobuf.plant.index)
}

// repeated uint32 tiles = 6 [packed = true];
inline int plant::_internal_tiles_size() const {
  return tiles_.size();
}
inline int plant::tiles_size() const {
  return _internal_tiles_size();
}
inline void plant::clear_tiles() {
  tiles_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 plant::_internal_tiles(int index) const {
  return tiles_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 plant::tiles(int index) const {
  // @@protoc_insertion_point(field_get:wanderer.protobuf.plant.tiles)
  return _internal_tiles(index);
}
inline void plant::set_tiles(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  tiles_.Set(index, value);
  // @@protoc_insertion_point(field_set:wanderer.protobuf.plant.tiles)
}
inline void plant::_internal_add_tiles(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  tiles_.Add(value);
}
inline void plant::add_tiles(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_tiles(value);
  // @@protoc_insertion_point(field_add:wanderer.protobuf.plant.tiles)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
plant::_internal_tiles() const {
  return tiles_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
plant::tiles() const {
  // @@protoc_insertion_point(field_list:wanderer.protobuf.plant.tiles)
  return _internal_tiles();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
plant::_internal_mutable_tiles() {
  return &tiles_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
plant::mutable_tiles() {
  // @@protoc_insertion_point(field_mutable_list:wanderer.protobuf.plant.tiles)
  return _internal_mutable_tiles();
}

// repeated uint32 tall_tiles = 7 [packed = true];
inline int plant::_internal_tall_tiles_size() const {
  return tall_tiles_.size();
}
inline int plant::tall_tiles_size() const {
  return _internal_tall_tiles_size();
}
inline void plant::clear_tall_tiles() {
  tall_tiles_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 plant::_internal_tall_tiles(int index) const {
  return tall_tiles_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 plant::tall_tiles(int index) const {
  // @@protoc_insertion_point(field_get:wanderer.protobuf.plant.tall_tiles)
  return _internal_tall_tiles(index);
}
inline void plant::set_tall_tiles(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  tall_tiles_.Set(index, value);
  // @@protoc_insertion_point(field_set:wanderer.protobuf.plant.tall_tiles)
}
inline void plant::_internal_add_tall_tiles(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  tall_tiles_.Add(value);
}
inline void plant::add_tall_tiles(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_tall_tiles(value);
  // @@protoc_insertion_point(field_add:wanderer.protobuf.plant.tall_tiles)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
plant::_internal_tall_tiles() const {
  return tall_tiles_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
plant::tall_tiles() const {
  // @@protoc_insertion_point(field_list:wanderer.protobuf.plant.tall_tiles)
  return _internal_tall_tiles();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
plant::_internal_mutable_tall_tiles() {
  return &tall_tiles_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
plant::mutable_tall_tiles() {
  // @@protoc_insertion_point(field_mutable_list:wanderer.protobuf.plant.tall_tiles)
  return _internal_mutable_tall_tiles();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace wanderer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_plant_2eproto
