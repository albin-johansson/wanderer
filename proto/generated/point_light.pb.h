// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: point_light.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_point_5flight_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_point_5flight_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "float2.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_point_5flight_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_point_5flight_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_point_5flight_2eproto;
namespace wanderer {
namespace proto {
class point_light;
struct point_lightDefaultTypeInternal;
extern point_lightDefaultTypeInternal _point_light_default_instance_;
}  // namespace proto
}  // namespace wanderer
PROTOBUF_NAMESPACE_OPEN
template<> ::wanderer::proto::point_light* Arena::CreateMaybeMessage<::wanderer::proto::point_light>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace wanderer {
namespace proto {

// ===================================================================

class point_light final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wanderer.proto.point_light) */ {
 public:
  inline point_light() : point_light(nullptr) {}
  ~point_light() override;
  explicit constexpr point_light(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  point_light(const point_light& from);
  point_light(point_light&& from) noexcept
    : point_light() {
    *this = ::std::move(from);
  }

  inline point_light& operator=(const point_light& from) {
    CopyFrom(from);
    return *this;
  }
  inline point_light& operator=(point_light&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const point_light& default_instance() {
    return *internal_default_instance();
  }
  static inline const point_light* internal_default_instance() {
    return reinterpret_cast<const point_light*>(
               &_point_light_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(point_light& a, point_light& b) {
    a.Swap(&b);
  }
  inline void Swap(point_light* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(point_light* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline point_light* New() const final {
    return new point_light();
  }

  point_light* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<point_light>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const point_light& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const point_light& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(point_light* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wanderer.proto.point_light";
  }
  protected:
  explicit point_light(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kSizeFieldNumber = 2,
    kFluctuationFieldNumber = 3,
    kFluctuationStepFieldNumber = 4,
    kFluctuationLimitFieldNumber = 5,
  };
  // optional .wanderer.proto.float2 position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::wanderer::proto::float2& position() const;
  PROTOBUF_MUST_USE_RESULT ::wanderer::proto::float2* release_position();
  ::wanderer::proto::float2* mutable_position();
  void set_allocated_position(::wanderer::proto::float2* position);
  private:
  const ::wanderer::proto::float2& _internal_position() const;
  ::wanderer::proto::float2* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::wanderer::proto::float2* position);
  ::wanderer::proto::float2* unsafe_arena_release_position();

  // optional float size = 2;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  float size() const;
  void set_size(float value);
  private:
  float _internal_size() const;
  void _internal_set_size(float value);
  public:

  // optional float fluctuation = 3;
  bool has_fluctuation() const;
  private:
  bool _internal_has_fluctuation() const;
  public:
  void clear_fluctuation();
  float fluctuation() const;
  void set_fluctuation(float value);
  private:
  float _internal_fluctuation() const;
  void _internal_set_fluctuation(float value);
  public:

  // optional float fluctuation_step = 4;
  bool has_fluctuation_step() const;
  private:
  bool _internal_has_fluctuation_step() const;
  public:
  void clear_fluctuation_step();
  float fluctuation_step() const;
  void set_fluctuation_step(float value);
  private:
  float _internal_fluctuation_step() const;
  void _internal_set_fluctuation_step(float value);
  public:

  // optional float fluctuation_limit = 5;
  bool has_fluctuation_limit() const;
  private:
  bool _internal_has_fluctuation_limit() const;
  public:
  void clear_fluctuation_limit();
  float fluctuation_limit() const;
  void set_fluctuation_limit(float value);
  private:
  float _internal_fluctuation_limit() const;
  void _internal_set_fluctuation_limit(float value);
  public:

  // @@protoc_insertion_point(class_scope:wanderer.proto.point_light)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::wanderer::proto::float2* position_;
  float size_;
  float fluctuation_;
  float fluctuation_step_;
  float fluctuation_limit_;
  friend struct ::TableStruct_point_5flight_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// point_light

// optional .wanderer.proto.float2 position = 1;
inline bool point_light::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || position_ != nullptr);
  return value;
}
inline bool point_light::has_position() const {
  return _internal_has_position();
}
inline const ::wanderer::proto::float2& point_light::_internal_position() const {
  const ::wanderer::proto::float2* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::wanderer::proto::float2&>(
      ::wanderer::proto::_float2_default_instance_);
}
inline const ::wanderer::proto::float2& point_light::position() const {
  // @@protoc_insertion_point(field_get:wanderer.proto.point_light.position)
  return _internal_position();
}
inline void point_light::unsafe_arena_set_allocated_position(
    ::wanderer::proto::float2* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wanderer.proto.point_light.position)
}
inline ::wanderer::proto::float2* point_light::release_position() {
  _has_bits_[0] &= ~0x00000001u;
  ::wanderer::proto::float2* temp = position_;
  position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::wanderer::proto::float2* point_light::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:wanderer.proto.point_light.position)
  _has_bits_[0] &= ~0x00000001u;
  ::wanderer::proto::float2* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::wanderer::proto::float2* point_light::_internal_mutable_position() {
  _has_bits_[0] |= 0x00000001u;
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::wanderer::proto::float2>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::wanderer::proto::float2* point_light::mutable_position() {
  ::wanderer::proto::float2* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:wanderer.proto.point_light.position)
  return _msg;
}
inline void point_light::set_allocated_position(::wanderer::proto::float2* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:wanderer.proto.point_light.position)
}

// optional float size = 2;
inline bool point_light::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool point_light::has_size() const {
  return _internal_has_size();
}
inline void point_light::clear_size() {
  size_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float point_light::_internal_size() const {
  return size_;
}
inline float point_light::size() const {
  // @@protoc_insertion_point(field_get:wanderer.proto.point_light.size)
  return _internal_size();
}
inline void point_light::_internal_set_size(float value) {
  _has_bits_[0] |= 0x00000002u;
  size_ = value;
}
inline void point_light::set_size(float value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:wanderer.proto.point_light.size)
}

// optional float fluctuation = 3;
inline bool point_light::_internal_has_fluctuation() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool point_light::has_fluctuation() const {
  return _internal_has_fluctuation();
}
inline void point_light::clear_fluctuation() {
  fluctuation_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float point_light::_internal_fluctuation() const {
  return fluctuation_;
}
inline float point_light::fluctuation() const {
  // @@protoc_insertion_point(field_get:wanderer.proto.point_light.fluctuation)
  return _internal_fluctuation();
}
inline void point_light::_internal_set_fluctuation(float value) {
  _has_bits_[0] |= 0x00000004u;
  fluctuation_ = value;
}
inline void point_light::set_fluctuation(float value) {
  _internal_set_fluctuation(value);
  // @@protoc_insertion_point(field_set:wanderer.proto.point_light.fluctuation)
}

// optional float fluctuation_step = 4;
inline bool point_light::_internal_has_fluctuation_step() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool point_light::has_fluctuation_step() const {
  return _internal_has_fluctuation_step();
}
inline void point_light::clear_fluctuation_step() {
  fluctuation_step_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float point_light::_internal_fluctuation_step() const {
  return fluctuation_step_;
}
inline float point_light::fluctuation_step() const {
  // @@protoc_insertion_point(field_get:wanderer.proto.point_light.fluctuation_step)
  return _internal_fluctuation_step();
}
inline void point_light::_internal_set_fluctuation_step(float value) {
  _has_bits_[0] |= 0x00000008u;
  fluctuation_step_ = value;
}
inline void point_light::set_fluctuation_step(float value) {
  _internal_set_fluctuation_step(value);
  // @@protoc_insertion_point(field_set:wanderer.proto.point_light.fluctuation_step)
}

// optional float fluctuation_limit = 5;
inline bool point_light::_internal_has_fluctuation_limit() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool point_light::has_fluctuation_limit() const {
  return _internal_has_fluctuation_limit();
}
inline void point_light::clear_fluctuation_limit() {
  fluctuation_limit_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float point_light::_internal_fluctuation_limit() const {
  return fluctuation_limit_;
}
inline float point_light::fluctuation_limit() const {
  // @@protoc_insertion_point(field_get:wanderer.proto.point_light.fluctuation_limit)
  return _internal_fluctuation_limit();
}
inline void point_light::_internal_set_fluctuation_limit(float value) {
  _has_bits_[0] |= 0x00000010u;
  fluctuation_limit_ = value;
}
inline void point_light::set_fluctuation_limit(float value) {
  _internal_set_fluctuation_limit(value);
  // @@protoc_insertion_point(field_set:wanderer.proto.point_light.fluctuation_limit)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace wanderer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_point_5flight_2eproto
