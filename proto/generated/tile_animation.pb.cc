// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tile_animation.proto

#include "tile_animation.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace wanderer {
namespace proto {
constexpr TileAnimation_Frame::TileAnimation_Frame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tile_id_(0)
  , duration_(0u){}
struct TileAnimation_FrameDefaultTypeInternal {
  constexpr TileAnimation_FrameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TileAnimation_FrameDefaultTypeInternal() {}
  union {
    TileAnimation_Frame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TileAnimation_FrameDefaultTypeInternal _TileAnimation_Frame_default_instance_;
constexpr TileAnimation::TileAnimation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : frames_()
  , index_(uint64_t{0u})
  , then_(0u){}
struct TileAnimationDefaultTypeInternal {
  constexpr TileAnimationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TileAnimationDefaultTypeInternal() {}
  union {
    TileAnimation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TileAnimationDefaultTypeInternal _TileAnimation_default_instance_;
}  // namespace proto
}  // namespace wanderer
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tile_5fanimation_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tile_5fanimation_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tile_5fanimation_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tile_5fanimation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::wanderer::proto::TileAnimation_Frame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::wanderer::proto::TileAnimation_Frame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wanderer::proto::TileAnimation_Frame, tile_id_),
  PROTOBUF_FIELD_OFFSET(::wanderer::proto::TileAnimation_Frame, duration_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::wanderer::proto::TileAnimation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::wanderer::proto::TileAnimation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wanderer::proto::TileAnimation, index_),
  PROTOBUF_FIELD_OFFSET(::wanderer::proto::TileAnimation, then_),
  PROTOBUF_FIELD_OFFSET(::wanderer::proto::TileAnimation, frames_),
  0,
  1,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::wanderer::proto::TileAnimation_Frame)},
  { 10, 19, -1, sizeof(::wanderer::proto::TileAnimation)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wanderer::proto::_TileAnimation_Frame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wanderer::proto::_TileAnimation_default_instance_),
};

const char descriptor_table_protodef_tile_5fanimation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024tile_animation.proto\022\016wanderer.proto\"\315"
  "\001\n\rTileAnimation\022\022\n\005index\030\001 \001(\004H\000\210\001\001\022\021\n\004"
  "then\030\002 \001(\rH\001\210\001\001\0223\n\006frames\030\003 \003(\0132#.wander"
  "er.proto.TileAnimation.Frame\032M\n\005Frame\022\024\n"
  "\007tile_id\030\001 \001(\005H\000\210\001\001\022\025\n\010duration\030\002 \001(\rH\001\210"
  "\001\001B\n\n\010_tile_idB\013\n\t_durationB\010\n\006_indexB\007\n"
  "\005_thenb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tile_5fanimation_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tile_5fanimation_2eproto = {
  false, false, 254, descriptor_table_protodef_tile_5fanimation_2eproto, "tile_animation.proto", 
  &descriptor_table_tile_5fanimation_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_tile_5fanimation_2eproto::offsets,
  file_level_metadata_tile_5fanimation_2eproto, file_level_enum_descriptors_tile_5fanimation_2eproto, file_level_service_descriptors_tile_5fanimation_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_tile_5fanimation_2eproto_getter() {
  return &descriptor_table_tile_5fanimation_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_tile_5fanimation_2eproto(&descriptor_table_tile_5fanimation_2eproto);
namespace wanderer {
namespace proto {

// ===================================================================

class TileAnimation_Frame::_Internal {
 public:
  using HasBits = decltype(std::declval<TileAnimation_Frame>()._has_bits_);
  static void set_has_tile_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TileAnimation_Frame::TileAnimation_Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:wanderer.proto.TileAnimation.Frame)
}
TileAnimation_Frame::TileAnimation_Frame(const TileAnimation_Frame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tile_id_, &from.tile_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&tile_id_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:wanderer.proto.TileAnimation.Frame)
}

void TileAnimation_Frame::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tile_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&tile_id_)) + sizeof(duration_));
}

TileAnimation_Frame::~TileAnimation_Frame() {
  // @@protoc_insertion_point(destructor:wanderer.proto.TileAnimation.Frame)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TileAnimation_Frame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TileAnimation_Frame::ArenaDtor(void* object) {
  TileAnimation_Frame* _this = reinterpret_cast< TileAnimation_Frame* >(object);
  (void)_this;
}
void TileAnimation_Frame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TileAnimation_Frame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TileAnimation_Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:wanderer.proto.TileAnimation.Frame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&tile_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_) -
        reinterpret_cast<char*>(&tile_id_)) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TileAnimation_Frame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 tile_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tile_id(&has_bits);
          tile_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TileAnimation_Frame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wanderer.proto.TileAnimation.Frame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 tile_id = 1;
  if (_internal_has_tile_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_tile_id(), target);
  }

  // optional uint32 duration = 2;
  if (_internal_has_duration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wanderer.proto.TileAnimation.Frame)
  return target;
}

size_t TileAnimation_Frame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wanderer.proto.TileAnimation.Frame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 tile_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_tile_id());
    }

    // optional uint32 duration = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_duration());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TileAnimation_Frame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TileAnimation_Frame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TileAnimation_Frame::GetClassData() const { return &_class_data_; }

void TileAnimation_Frame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TileAnimation_Frame *>(to)->MergeFrom(
      static_cast<const TileAnimation_Frame &>(from));
}


void TileAnimation_Frame::MergeFrom(const TileAnimation_Frame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wanderer.proto.TileAnimation.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      tile_id_ = from.tile_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TileAnimation_Frame::CopyFrom(const TileAnimation_Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wanderer.proto.TileAnimation.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileAnimation_Frame::IsInitialized() const {
  return true;
}

void TileAnimation_Frame::InternalSwap(TileAnimation_Frame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TileAnimation_Frame, duration_)
      + sizeof(TileAnimation_Frame::duration_)
      - PROTOBUF_FIELD_OFFSET(TileAnimation_Frame, tile_id_)>(
          reinterpret_cast<char*>(&tile_id_),
          reinterpret_cast<char*>(&other->tile_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TileAnimation_Frame::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tile_5fanimation_2eproto_getter, &descriptor_table_tile_5fanimation_2eproto_once,
      file_level_metadata_tile_5fanimation_2eproto[0]);
}

// ===================================================================

class TileAnimation::_Internal {
 public:
  using HasBits = decltype(std::declval<TileAnimation>()._has_bits_);
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_then(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TileAnimation::TileAnimation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  frames_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:wanderer.proto.TileAnimation)
}
TileAnimation::TileAnimation(const TileAnimation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      frames_(from.frames_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&then_) -
    reinterpret_cast<char*>(&index_)) + sizeof(then_));
  // @@protoc_insertion_point(copy_constructor:wanderer.proto.TileAnimation)
}

void TileAnimation::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&then_) -
    reinterpret_cast<char*>(&index_)) + sizeof(then_));
}

TileAnimation::~TileAnimation() {
  // @@protoc_insertion_point(destructor:wanderer.proto.TileAnimation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TileAnimation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TileAnimation::ArenaDtor(void* object) {
  TileAnimation* _this = reinterpret_cast< TileAnimation* >(object);
  (void)_this;
}
void TileAnimation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TileAnimation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TileAnimation::Clear() {
// @@protoc_insertion_point(message_clear_start:wanderer.proto.TileAnimation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frames_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&then_) -
        reinterpret_cast<char*>(&index_)) + sizeof(then_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TileAnimation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 then = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_then(&has_bits);
          then_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .wanderer.proto.TileAnimation.Frame frames = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_frames(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TileAnimation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wanderer.proto.TileAnimation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional uint64 index = 1;
  if (_internal_has_index()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_index(), target);
  }

  // optional uint32 then = 2;
  if (_internal_has_then()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_then(), target);
  }

  // repeated .wanderer.proto.TileAnimation.Frame frames = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_frames_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_frames(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wanderer.proto.TileAnimation)
  return target;
}

size_t TileAnimation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wanderer.proto.TileAnimation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .wanderer.proto.TileAnimation.Frame frames = 3;
  total_size += 1UL * this->_internal_frames_size();
  for (const auto& msg : this->frames_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_index());
    }

    // optional uint32 then = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_then());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TileAnimation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TileAnimation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TileAnimation::GetClassData() const { return &_class_data_; }

void TileAnimation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TileAnimation *>(to)->MergeFrom(
      static_cast<const TileAnimation &>(from));
}


void TileAnimation::MergeFrom(const TileAnimation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wanderer.proto.TileAnimation)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  frames_.MergeFrom(from.frames_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000002u) {
      then_ = from.then_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TileAnimation::CopyFrom(const TileAnimation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wanderer.proto.TileAnimation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileAnimation::IsInitialized() const {
  return true;
}

void TileAnimation::InternalSwap(TileAnimation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  frames_.InternalSwap(&other->frames_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TileAnimation, then_)
      + sizeof(TileAnimation::then_)
      - PROTOBUF_FIELD_OFFSET(TileAnimation, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TileAnimation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tile_5fanimation_2eproto_getter, &descriptor_table_tile_5fanimation_2eproto_once,
      file_level_metadata_tile_5fanimation_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace wanderer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::wanderer::proto::TileAnimation_Frame* Arena::CreateMaybeMessage< ::wanderer::proto::TileAnimation_Frame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wanderer::proto::TileAnimation_Frame >(arena);
}
template<> PROTOBUF_NOINLINE ::wanderer::proto::TileAnimation* Arena::CreateMaybeMessage< ::wanderer::proto::TileAnimation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wanderer::proto::TileAnimation >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
