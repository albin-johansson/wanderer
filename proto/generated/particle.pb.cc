// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: particle.proto

#include "particle.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace wanderer {
namespace proto {
constexpr Particle::Particle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_(nullptr)
  , acceleration_(nullptr)
  , color_(nullptr)
  , now_(0)
  , duration_(0){}
struct ParticleDefaultTypeInternal {
  constexpr ParticleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParticleDefaultTypeInternal() {}
  union {
    Particle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParticleDefaultTypeInternal _Particle_default_instance_;
}  // namespace proto
}  // namespace wanderer
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_particle_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_particle_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_particle_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_particle_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::wanderer::proto::Particle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::wanderer::proto::Particle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wanderer::proto::Particle, position_),
  PROTOBUF_FIELD_OFFSET(::wanderer::proto::Particle, acceleration_),
  PROTOBUF_FIELD_OFFSET(::wanderer::proto::Particle, now_),
  PROTOBUF_FIELD_OFFSET(::wanderer::proto::Particle, duration_),
  PROTOBUF_FIELD_OFFSET(::wanderer::proto::Particle, color_),
  0,
  1,
  3,
  4,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::wanderer::proto::Particle)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wanderer::proto::_Particle_default_instance_),
};

const char descriptor_table_protodef_particle_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016particle.proto\022\016wanderer.proto\032\013color."
  "proto\032\014float3.proto\"\375\001\n\010Particle\022-\n\010posi"
  "tion\030\001 \001(\0132\026.wanderer.proto.float3H\000\210\001\001\022"
  "1\n\014acceleration\030\002 \001(\0132\026.wanderer.proto.f"
  "loat3H\001\210\001\001\022\020\n\003now\030\003 \001(\002H\002\210\001\001\022\025\n\010duration"
  "\030\004 \001(\002H\003\210\001\001\022)\n\005color\030\005 \001(\0132\025.wanderer.pr"
  "oto.ColorH\004\210\001\001B\013\n\t_positionB\017\n\r_accelera"
  "tionB\006\n\004_nowB\013\n\t_durationB\010\n\006_colorb\006pro"
  "to3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_particle_2eproto_deps[2] = {
  &::descriptor_table_color_2eproto,
  &::descriptor_table_float3_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_particle_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_particle_2eproto = {
  false, false, 323, descriptor_table_protodef_particle_2eproto, "particle.proto", 
  &descriptor_table_particle_2eproto_once, descriptor_table_particle_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_particle_2eproto::offsets,
  file_level_metadata_particle_2eproto, file_level_enum_descriptors_particle_2eproto, file_level_service_descriptors_particle_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_particle_2eproto_getter() {
  return &descriptor_table_particle_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_particle_2eproto(&descriptor_table_particle_2eproto);
namespace wanderer {
namespace proto {

// ===================================================================

class Particle::_Internal {
 public:
  using HasBits = decltype(std::declval<Particle>()._has_bits_);
  static const ::wanderer::proto::float3& position(const Particle* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::wanderer::proto::float3& acceleration(const Particle* msg);
  static void set_has_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_now(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::wanderer::proto::Color& color(const Particle* msg);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::wanderer::proto::float3&
Particle::_Internal::position(const Particle* msg) {
  return *msg->position_;
}
const ::wanderer::proto::float3&
Particle::_Internal::acceleration(const Particle* msg) {
  return *msg->acceleration_;
}
const ::wanderer::proto::Color&
Particle::_Internal::color(const Particle* msg) {
  return *msg->color_;
}
void Particle::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Particle::clear_acceleration() {
  if (acceleration_ != nullptr) acceleration_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void Particle::clear_color() {
  if (color_ != nullptr) color_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
Particle::Particle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:wanderer.proto.Particle)
}
Particle::Particle(const Particle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::wanderer::proto::float3(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_acceleration()) {
    acceleration_ = new ::wanderer::proto::float3(*from.acceleration_);
  } else {
    acceleration_ = nullptr;
  }
  if (from._internal_has_color()) {
    color_ = new ::wanderer::proto::Color(*from.color_);
  } else {
    color_ = nullptr;
  }
  ::memcpy(&now_, &from.now_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&now_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:wanderer.proto.Particle)
}

void Particle::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&position_)) + sizeof(duration_));
}

Particle::~Particle() {
  // @@protoc_insertion_point(destructor:wanderer.proto.Particle)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Particle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete acceleration_;
  if (this != internal_default_instance()) delete color_;
}

void Particle::ArenaDtor(void* object) {
  Particle* _this = reinterpret_cast< Particle* >(object);
  (void)_this;
}
void Particle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Particle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Particle::Clear() {
// @@protoc_insertion_point(message_clear_start:wanderer.proto.Particle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(position_ != nullptr);
      position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(acceleration_ != nullptr);
      acceleration_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(color_ != nullptr);
      color_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&now_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_) -
        reinterpret_cast<char*>(&now_)) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Particle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .wanderer.proto.float3 position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .wanderer.proto.float3 acceleration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_acceleration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float now = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_now(&has_bits);
          now_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float duration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .wanderer.proto.Color color = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Particle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wanderer.proto.Particle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .wanderer.proto.float3 position = 1;
  if (_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // optional .wanderer.proto.float3 acceleration = 2;
  if (_internal_has_acceleration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::acceleration(this), target, stream);
  }

  // optional float now = 3;
  if (_internal_has_now()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_now(), target);
  }

  // optional float duration = 4;
  if (_internal_has_duration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_duration(), target);
  }

  // optional .wanderer.proto.Color color = 5;
  if (_internal_has_color()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::color(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wanderer.proto.Particle)
  return target;
}

size_t Particle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wanderer.proto.Particle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .wanderer.proto.float3 position = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional .wanderer.proto.float3 acceleration = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *acceleration_);
    }

    // optional .wanderer.proto.Color color = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *color_);
    }

    // optional float now = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float duration = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Particle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Particle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Particle::GetClassData() const { return &_class_data_; }

void Particle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Particle *>(to)->MergeFrom(
      static_cast<const Particle &>(from));
}


void Particle::MergeFrom(const Particle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wanderer.proto.Particle)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_position()->::wanderer::proto::float3::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_acceleration()->::wanderer::proto::float3::MergeFrom(from._internal_acceleration());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_color()->::wanderer::proto::Color::MergeFrom(from._internal_color());
    }
    if (cached_has_bits & 0x00000008u) {
      now_ = from.now_;
    }
    if (cached_has_bits & 0x00000010u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Particle::CopyFrom(const Particle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wanderer.proto.Particle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Particle::IsInitialized() const {
  return true;
}

void Particle::InternalSwap(Particle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Particle, duration_)
      + sizeof(Particle::duration_)
      - PROTOBUF_FIELD_OFFSET(Particle, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Particle::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_particle_2eproto_getter, &descriptor_table_particle_2eproto_once,
      file_level_metadata_particle_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace wanderer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::wanderer::proto::Particle* Arena::CreateMaybeMessage< ::wanderer::proto::Particle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wanderer::proto::Particle >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
