// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: save.proto

#include "save.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace wanderer {
namespace proto {
constexpr SharedData::SharedData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : time_(nullptr){}
struct SharedDataDefaultTypeInternal {
  constexpr SharedDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SharedDataDefaultTypeInternal() {}
  union {
    SharedData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SharedDataDefaultTypeInternal _SharedData_default_instance_;
constexpr Save::Save(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : levels_()
  , shared_(nullptr)
  , current_level_id_(0){}
struct SaveDefaultTypeInternal {
  constexpr SaveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SaveDefaultTypeInternal() {}
  union {
    Save _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SaveDefaultTypeInternal _Save_default_instance_;
}  // namespace proto
}  // namespace wanderer
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_save_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_save_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_save_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_save_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::wanderer::proto::SharedData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::wanderer::proto::SharedData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wanderer::proto::SharedData, time_),
  0,
  PROTOBUF_FIELD_OFFSET(::wanderer::proto::Save, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::wanderer::proto::Save, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wanderer::proto::Save, current_level_id_),
  PROTOBUF_FIELD_OFFSET(::wanderer::proto::Save, shared_),
  PROTOBUF_FIELD_OFFSET(::wanderer::proto::Save, levels_),
  1,
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::wanderer::proto::SharedData)},
  { 8, 17, -1, sizeof(::wanderer::proto::Save)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wanderer::proto::_SharedData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wanderer::proto::_Save_default_instance_),
};

const char descriptor_table_protodef_save_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nsave.proto\022\016wanderer.proto\032\013level.prot"
  "o\032\021time_of_day.proto\"C\n\nSharedData\022,\n\004ti"
  "me\030\001 \001(\0132\031.wanderer.proto.TimeOfDayH\000\210\001\001"
  "B\007\n\005_time\"\235\001\n\004Save\022\035\n\020current_level_id\030\001"
  " \001(\005H\000\210\001\001\022/\n\006shared\030\002 \001(\0132\032.wanderer.pro"
  "to.SharedDataH\001\210\001\001\022%\n\006levels\030\003 \003(\0132\025.wan"
  "derer.proto.LevelB\023\n\021_current_level_idB\t"
  "\n\007_sharedb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_save_2eproto_deps[2] = {
  &::descriptor_table_level_2eproto,
  &::descriptor_table_time_5fof_5fday_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_save_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_save_2eproto = {
  false, false, 297, descriptor_table_protodef_save_2eproto, "save.proto", 
  &descriptor_table_save_2eproto_once, descriptor_table_save_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_save_2eproto::offsets,
  file_level_metadata_save_2eproto, file_level_enum_descriptors_save_2eproto, file_level_service_descriptors_save_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_save_2eproto_getter() {
  return &descriptor_table_save_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_save_2eproto(&descriptor_table_save_2eproto);
namespace wanderer {
namespace proto {

// ===================================================================

class SharedData::_Internal {
 public:
  using HasBits = decltype(std::declval<SharedData>()._has_bits_);
  static const ::wanderer::proto::TimeOfDay& time(const SharedData* msg);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::wanderer::proto::TimeOfDay&
SharedData::_Internal::time(const SharedData* msg) {
  return *msg->time_;
}
void SharedData::clear_time() {
  if (time_ != nullptr) time_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SharedData::SharedData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:wanderer.proto.SharedData)
}
SharedData::SharedData(const SharedData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_time()) {
    time_ = new ::wanderer::proto::TimeOfDay(*from.time_);
  } else {
    time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:wanderer.proto.SharedData)
}

void SharedData::SharedCtor() {
time_ = nullptr;
}

SharedData::~SharedData() {
  // @@protoc_insertion_point(destructor:wanderer.proto.SharedData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SharedData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete time_;
}

void SharedData::ArenaDtor(void* object) {
  SharedData* _this = reinterpret_cast< SharedData* >(object);
  (void)_this;
}
void SharedData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SharedData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharedData::Clear() {
// @@protoc_insertion_point(message_clear_start:wanderer.proto.SharedData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(time_ != nullptr);
    time_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SharedData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .wanderer.proto.TimeOfDay time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SharedData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wanderer.proto.SharedData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .wanderer.proto.TimeOfDay time = 1;
  if (_internal_has_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wanderer.proto.SharedData)
  return target;
}

size_t SharedData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wanderer.proto.SharedData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .wanderer.proto.TimeOfDay time = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SharedData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SharedData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SharedData::GetClassData() const { return &_class_data_; }

void SharedData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SharedData *>(to)->MergeFrom(
      static_cast<const SharedData &>(from));
}


void SharedData::MergeFrom(const SharedData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wanderer.proto.SharedData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_time()) {
    _internal_mutable_time()->::wanderer::proto::TimeOfDay::MergeFrom(from._internal_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SharedData::CopyFrom(const SharedData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wanderer.proto.SharedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharedData::IsInitialized() const {
  return true;
}

void SharedData::InternalSwap(SharedData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SharedData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_save_2eproto_getter, &descriptor_table_save_2eproto_once,
      file_level_metadata_save_2eproto[0]);
}

// ===================================================================

class Save::_Internal {
 public:
  using HasBits = decltype(std::declval<Save>()._has_bits_);
  static void set_has_current_level_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::wanderer::proto::SharedData& shared(const Save* msg);
  static void set_has_shared(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::wanderer::proto::SharedData&
Save::_Internal::shared(const Save* msg) {
  return *msg->shared_;
}
void Save::clear_levels() {
  levels_.Clear();
}
Save::Save(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  levels_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:wanderer.proto.Save)
}
Save::Save(const Save& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      levels_(from.levels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_shared()) {
    shared_ = new ::wanderer::proto::SharedData(*from.shared_);
  } else {
    shared_ = nullptr;
  }
  current_level_id_ = from.current_level_id_;
  // @@protoc_insertion_point(copy_constructor:wanderer.proto.Save)
}

void Save::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&shared_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&current_level_id_) -
    reinterpret_cast<char*>(&shared_)) + sizeof(current_level_id_));
}

Save::~Save() {
  // @@protoc_insertion_point(destructor:wanderer.proto.Save)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Save::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete shared_;
}

void Save::ArenaDtor(void* object) {
  Save* _this = reinterpret_cast< Save* >(object);
  (void)_this;
}
void Save::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Save::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Save::Clear() {
// @@protoc_insertion_point(message_clear_start:wanderer.proto.Save)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  levels_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(shared_ != nullptr);
    shared_->Clear();
  }
  current_level_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Save::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 current_level_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_current_level_id(&has_bits);
          current_level_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .wanderer.proto.SharedData shared = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_shared(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .wanderer.proto.Level levels = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_levels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Save::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wanderer.proto.Save)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 current_level_id = 1;
  if (_internal_has_current_level_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_current_level_id(), target);
  }

  // optional .wanderer.proto.SharedData shared = 2;
  if (_internal_has_shared()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::shared(this), target, stream);
  }

  // repeated .wanderer.proto.Level levels = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_levels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_levels(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wanderer.proto.Save)
  return target;
}

size_t Save::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wanderer.proto.Save)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .wanderer.proto.Level levels = 3;
  total_size += 1UL * this->_internal_levels_size();
  for (const auto& msg : this->levels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .wanderer.proto.SharedData shared = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shared_);
    }

    // optional int32 current_level_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_current_level_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Save::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Save::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Save::GetClassData() const { return &_class_data_; }

void Save::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Save *>(to)->MergeFrom(
      static_cast<const Save &>(from));
}


void Save::MergeFrom(const Save& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wanderer.proto.Save)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  levels_.MergeFrom(from.levels_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_shared()->::wanderer::proto::SharedData::MergeFrom(from._internal_shared());
    }
    if (cached_has_bits & 0x00000002u) {
      current_level_id_ = from.current_level_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Save::CopyFrom(const Save& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wanderer.proto.Save)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Save::IsInitialized() const {
  return true;
}

void Save::InternalSwap(Save* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  levels_.InternalSwap(&other->levels_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Save, current_level_id_)
      + sizeof(Save::current_level_id_)
      - PROTOBUF_FIELD_OFFSET(Save, shared_)>(
          reinterpret_cast<char*>(&shared_),
          reinterpret_cast<char*>(&other->shared_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Save::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_save_2eproto_getter, &descriptor_table_save_2eproto_once,
      file_level_metadata_save_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace wanderer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::wanderer::proto::SharedData* Arena::CreateMaybeMessage< ::wanderer::proto::SharedData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wanderer::proto::SharedData >(arena);
}
template<> PROTOBUF_NOINLINE ::wanderer::proto::Save* Arena::CreateMaybeMessage< ::wanderer::proto::Save >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wanderer::proto::Save >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
