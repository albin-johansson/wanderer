// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hitbox.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_hitbox_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_hitbox_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "float2.pb.h"
#include "rect.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_hitbox_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_hitbox_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hitbox_2eproto;
namespace wanderer {
namespace proto {
class Hitbox;
struct HitboxDefaultTypeInternal;
extern HitboxDefaultTypeInternal _Hitbox_default_instance_;
class Subhitbox;
struct SubhitboxDefaultTypeInternal;
extern SubhitboxDefaultTypeInternal _Subhitbox_default_instance_;
}  // namespace proto
}  // namespace wanderer
PROTOBUF_NAMESPACE_OPEN
template<> ::wanderer::proto::Hitbox* Arena::CreateMaybeMessage<::wanderer::proto::Hitbox>(Arena*);
template<> ::wanderer::proto::Subhitbox* Arena::CreateMaybeMessage<::wanderer::proto::Subhitbox>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace wanderer {
namespace proto {

// ===================================================================

class Subhitbox final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wanderer.proto.Subhitbox) */ {
 public:
  inline Subhitbox() : Subhitbox(nullptr) {}
  ~Subhitbox() override;
  explicit constexpr Subhitbox(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Subhitbox(const Subhitbox& from);
  Subhitbox(Subhitbox&& from) noexcept
    : Subhitbox() {
    *this = ::std::move(from);
  }

  inline Subhitbox& operator=(const Subhitbox& from) {
    CopyFrom(from);
    return *this;
  }
  inline Subhitbox& operator=(Subhitbox&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Subhitbox& default_instance() {
    return *internal_default_instance();
  }
  static inline const Subhitbox* internal_default_instance() {
    return reinterpret_cast<const Subhitbox*>(
               &_Subhitbox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Subhitbox& a, Subhitbox& b) {
    a.Swap(&b);
  }
  inline void Swap(Subhitbox* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Subhitbox* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Subhitbox* New() const final {
    return new Subhitbox();
  }

  Subhitbox* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Subhitbox>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Subhitbox& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Subhitbox& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Subhitbox* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wanderer.proto.Subhitbox";
  }
  protected:
  explicit Subhitbox(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // optional .wanderer.proto.float2 offset = 1;
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  const ::wanderer::proto::float2& offset() const;
  PROTOBUF_MUST_USE_RESULT ::wanderer::proto::float2* release_offset();
  ::wanderer::proto::float2* mutable_offset();
  void set_allocated_offset(::wanderer::proto::float2* offset);
  private:
  const ::wanderer::proto::float2& _internal_offset() const;
  ::wanderer::proto::float2* _internal_mutable_offset();
  public:
  void unsafe_arena_set_allocated_offset(
      ::wanderer::proto::float2* offset);
  ::wanderer::proto::float2* unsafe_arena_release_offset();

  // optional .wanderer.proto.float2 size = 2;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::wanderer::proto::float2& size() const;
  PROTOBUF_MUST_USE_RESULT ::wanderer::proto::float2* release_size();
  ::wanderer::proto::float2* mutable_size();
  void set_allocated_size(::wanderer::proto::float2* size);
  private:
  const ::wanderer::proto::float2& _internal_size() const;
  ::wanderer::proto::float2* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::wanderer::proto::float2* size);
  ::wanderer::proto::float2* unsafe_arena_release_size();

  // @@protoc_insertion_point(class_scope:wanderer.proto.Subhitbox)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::wanderer::proto::float2* offset_;
  ::wanderer::proto::float2* size_;
  friend struct ::TableStruct_hitbox_2eproto;
};
// -------------------------------------------------------------------

class Hitbox final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wanderer.proto.Hitbox) */ {
 public:
  inline Hitbox() : Hitbox(nullptr) {}
  ~Hitbox() override;
  explicit constexpr Hitbox(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Hitbox(const Hitbox& from);
  Hitbox(Hitbox&& from) noexcept
    : Hitbox() {
    *this = ::std::move(from);
  }

  inline Hitbox& operator=(const Hitbox& from) {
    CopyFrom(from);
    return *this;
  }
  inline Hitbox& operator=(Hitbox&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Hitbox& default_instance() {
    return *internal_default_instance();
  }
  static inline const Hitbox* internal_default_instance() {
    return reinterpret_cast<const Hitbox*>(
               &_Hitbox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Hitbox& a, Hitbox& b) {
    a.Swap(&b);
  }
  inline void Swap(Hitbox* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Hitbox* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Hitbox* New() const final {
    return new Hitbox();
  }

  Hitbox* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Hitbox>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Hitbox& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Hitbox& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Hitbox* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wanderer.proto.Hitbox";
  }
  protected:
  explicit Hitbox(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoxesFieldNumber = 3,
    kOriginFieldNumber = 1,
    kBoundsFieldNumber = 2,
    kEnabledFieldNumber = 4,
  };
  // repeated .wanderer.proto.Subhitbox boxes = 3;
  int boxes_size() const;
  private:
  int _internal_boxes_size() const;
  public:
  void clear_boxes();
  ::wanderer::proto::Subhitbox* mutable_boxes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wanderer::proto::Subhitbox >*
      mutable_boxes();
  private:
  const ::wanderer::proto::Subhitbox& _internal_boxes(int index) const;
  ::wanderer::proto::Subhitbox* _internal_add_boxes();
  public:
  const ::wanderer::proto::Subhitbox& boxes(int index) const;
  ::wanderer::proto::Subhitbox* add_boxes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wanderer::proto::Subhitbox >&
      boxes() const;

  // optional .wanderer.proto.float2 origin = 1;
  bool has_origin() const;
  private:
  bool _internal_has_origin() const;
  public:
  void clear_origin();
  const ::wanderer::proto::float2& origin() const;
  PROTOBUF_MUST_USE_RESULT ::wanderer::proto::float2* release_origin();
  ::wanderer::proto::float2* mutable_origin();
  void set_allocated_origin(::wanderer::proto::float2* origin);
  private:
  const ::wanderer::proto::float2& _internal_origin() const;
  ::wanderer::proto::float2* _internal_mutable_origin();
  public:
  void unsafe_arena_set_allocated_origin(
      ::wanderer::proto::float2* origin);
  ::wanderer::proto::float2* unsafe_arena_release_origin();

  // optional .wanderer.proto.frect bounds = 2;
  bool has_bounds() const;
  private:
  bool _internal_has_bounds() const;
  public:
  void clear_bounds();
  const ::wanderer::proto::frect& bounds() const;
  PROTOBUF_MUST_USE_RESULT ::wanderer::proto::frect* release_bounds();
  ::wanderer::proto::frect* mutable_bounds();
  void set_allocated_bounds(::wanderer::proto::frect* bounds);
  private:
  const ::wanderer::proto::frect& _internal_bounds() const;
  ::wanderer::proto::frect* _internal_mutable_bounds();
  public:
  void unsafe_arena_set_allocated_bounds(
      ::wanderer::proto::frect* bounds);
  ::wanderer::proto::frect* unsafe_arena_release_bounds();

  // optional bool enabled = 4;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:wanderer.proto.Hitbox)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wanderer::proto::Subhitbox > boxes_;
  ::wanderer::proto::float2* origin_;
  ::wanderer::proto::frect* bounds_;
  bool enabled_;
  friend struct ::TableStruct_hitbox_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Subhitbox

// optional .wanderer.proto.float2 offset = 1;
inline bool Subhitbox::_internal_has_offset() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || offset_ != nullptr);
  return value;
}
inline bool Subhitbox::has_offset() const {
  return _internal_has_offset();
}
inline const ::wanderer::proto::float2& Subhitbox::_internal_offset() const {
  const ::wanderer::proto::float2* p = offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::wanderer::proto::float2&>(
      ::wanderer::proto::_float2_default_instance_);
}
inline const ::wanderer::proto::float2& Subhitbox::offset() const {
  // @@protoc_insertion_point(field_get:wanderer.proto.Subhitbox.offset)
  return _internal_offset();
}
inline void Subhitbox::unsafe_arena_set_allocated_offset(
    ::wanderer::proto::float2* offset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(offset_);
  }
  offset_ = offset;
  if (offset) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wanderer.proto.Subhitbox.offset)
}
inline ::wanderer::proto::float2* Subhitbox::release_offset() {
  _has_bits_[0] &= ~0x00000001u;
  ::wanderer::proto::float2* temp = offset_;
  offset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::wanderer::proto::float2* Subhitbox::unsafe_arena_release_offset() {
  // @@protoc_insertion_point(field_release:wanderer.proto.Subhitbox.offset)
  _has_bits_[0] &= ~0x00000001u;
  ::wanderer::proto::float2* temp = offset_;
  offset_ = nullptr;
  return temp;
}
inline ::wanderer::proto::float2* Subhitbox::_internal_mutable_offset() {
  _has_bits_[0] |= 0x00000001u;
  if (offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::wanderer::proto::float2>(GetArenaForAllocation());
    offset_ = p;
  }
  return offset_;
}
inline ::wanderer::proto::float2* Subhitbox::mutable_offset() {
  ::wanderer::proto::float2* _msg = _internal_mutable_offset();
  // @@protoc_insertion_point(field_mutable:wanderer.proto.Subhitbox.offset)
  return _msg;
}
inline void Subhitbox::set_allocated_offset(::wanderer::proto::float2* offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(offset_);
  }
  if (offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(offset));
    if (message_arena != submessage_arena) {
      offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offset, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  offset_ = offset;
  // @@protoc_insertion_point(field_set_allocated:wanderer.proto.Subhitbox.offset)
}

// optional .wanderer.proto.float2 size = 2;
inline bool Subhitbox::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || size_ != nullptr);
  return value;
}
inline bool Subhitbox::has_size() const {
  return _internal_has_size();
}
inline const ::wanderer::proto::float2& Subhitbox::_internal_size() const {
  const ::wanderer::proto::float2* p = size_;
  return p != nullptr ? *p : reinterpret_cast<const ::wanderer::proto::float2&>(
      ::wanderer::proto::_float2_default_instance_);
}
inline const ::wanderer::proto::float2& Subhitbox::size() const {
  // @@protoc_insertion_point(field_get:wanderer.proto.Subhitbox.size)
  return _internal_size();
}
inline void Subhitbox::unsafe_arena_set_allocated_size(
    ::wanderer::proto::float2* size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_);
  }
  size_ = size;
  if (size) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wanderer.proto.Subhitbox.size)
}
inline ::wanderer::proto::float2* Subhitbox::release_size() {
  _has_bits_[0] &= ~0x00000002u;
  ::wanderer::proto::float2* temp = size_;
  size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::wanderer::proto::float2* Subhitbox::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:wanderer.proto.Subhitbox.size)
  _has_bits_[0] &= ~0x00000002u;
  ::wanderer::proto::float2* temp = size_;
  size_ = nullptr;
  return temp;
}
inline ::wanderer::proto::float2* Subhitbox::_internal_mutable_size() {
  _has_bits_[0] |= 0x00000002u;
  if (size_ == nullptr) {
    auto* p = CreateMaybeMessage<::wanderer::proto::float2>(GetArenaForAllocation());
    size_ = p;
  }
  return size_;
}
inline ::wanderer::proto::float2* Subhitbox::mutable_size() {
  ::wanderer::proto::float2* _msg = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:wanderer.proto.Subhitbox.size)
  return _msg;
}
inline void Subhitbox::set_allocated_size(::wanderer::proto::float2* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_);
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size));
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  size_ = size;
  // @@protoc_insertion_point(field_set_allocated:wanderer.proto.Subhitbox.size)
}

// -------------------------------------------------------------------

// Hitbox

// optional .wanderer.proto.float2 origin = 1;
inline bool Hitbox::_internal_has_origin() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || origin_ != nullptr);
  return value;
}
inline bool Hitbox::has_origin() const {
  return _internal_has_origin();
}
inline const ::wanderer::proto::float2& Hitbox::_internal_origin() const {
  const ::wanderer::proto::float2* p = origin_;
  return p != nullptr ? *p : reinterpret_cast<const ::wanderer::proto::float2&>(
      ::wanderer::proto::_float2_default_instance_);
}
inline const ::wanderer::proto::float2& Hitbox::origin() const {
  // @@protoc_insertion_point(field_get:wanderer.proto.Hitbox.origin)
  return _internal_origin();
}
inline void Hitbox::unsafe_arena_set_allocated_origin(
    ::wanderer::proto::float2* origin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(origin_);
  }
  origin_ = origin;
  if (origin) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wanderer.proto.Hitbox.origin)
}
inline ::wanderer::proto::float2* Hitbox::release_origin() {
  _has_bits_[0] &= ~0x00000001u;
  ::wanderer::proto::float2* temp = origin_;
  origin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::wanderer::proto::float2* Hitbox::unsafe_arena_release_origin() {
  // @@protoc_insertion_point(field_release:wanderer.proto.Hitbox.origin)
  _has_bits_[0] &= ~0x00000001u;
  ::wanderer::proto::float2* temp = origin_;
  origin_ = nullptr;
  return temp;
}
inline ::wanderer::proto::float2* Hitbox::_internal_mutable_origin() {
  _has_bits_[0] |= 0x00000001u;
  if (origin_ == nullptr) {
    auto* p = CreateMaybeMessage<::wanderer::proto::float2>(GetArenaForAllocation());
    origin_ = p;
  }
  return origin_;
}
inline ::wanderer::proto::float2* Hitbox::mutable_origin() {
  ::wanderer::proto::float2* _msg = _internal_mutable_origin();
  // @@protoc_insertion_point(field_mutable:wanderer.proto.Hitbox.origin)
  return _msg;
}
inline void Hitbox::set_allocated_origin(::wanderer::proto::float2* origin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(origin_);
  }
  if (origin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(origin));
    if (message_arena != submessage_arena) {
      origin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, origin, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  origin_ = origin;
  // @@protoc_insertion_point(field_set_allocated:wanderer.proto.Hitbox.origin)
}

// optional .wanderer.proto.frect bounds = 2;
inline bool Hitbox::_internal_has_bounds() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || bounds_ != nullptr);
  return value;
}
inline bool Hitbox::has_bounds() const {
  return _internal_has_bounds();
}
inline const ::wanderer::proto::frect& Hitbox::_internal_bounds() const {
  const ::wanderer::proto::frect* p = bounds_;
  return p != nullptr ? *p : reinterpret_cast<const ::wanderer::proto::frect&>(
      ::wanderer::proto::_frect_default_instance_);
}
inline const ::wanderer::proto::frect& Hitbox::bounds() const {
  // @@protoc_insertion_point(field_get:wanderer.proto.Hitbox.bounds)
  return _internal_bounds();
}
inline void Hitbox::unsafe_arena_set_allocated_bounds(
    ::wanderer::proto::frect* bounds) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bounds_);
  }
  bounds_ = bounds;
  if (bounds) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wanderer.proto.Hitbox.bounds)
}
inline ::wanderer::proto::frect* Hitbox::release_bounds() {
  _has_bits_[0] &= ~0x00000002u;
  ::wanderer::proto::frect* temp = bounds_;
  bounds_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::wanderer::proto::frect* Hitbox::unsafe_arena_release_bounds() {
  // @@protoc_insertion_point(field_release:wanderer.proto.Hitbox.bounds)
  _has_bits_[0] &= ~0x00000002u;
  ::wanderer::proto::frect* temp = bounds_;
  bounds_ = nullptr;
  return temp;
}
inline ::wanderer::proto::frect* Hitbox::_internal_mutable_bounds() {
  _has_bits_[0] |= 0x00000002u;
  if (bounds_ == nullptr) {
    auto* p = CreateMaybeMessage<::wanderer::proto::frect>(GetArenaForAllocation());
    bounds_ = p;
  }
  return bounds_;
}
inline ::wanderer::proto::frect* Hitbox::mutable_bounds() {
  ::wanderer::proto::frect* _msg = _internal_mutable_bounds();
  // @@protoc_insertion_point(field_mutable:wanderer.proto.Hitbox.bounds)
  return _msg;
}
inline void Hitbox::set_allocated_bounds(::wanderer::proto::frect* bounds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bounds_);
  }
  if (bounds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bounds));
    if (message_arena != submessage_arena) {
      bounds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bounds, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bounds_ = bounds;
  // @@protoc_insertion_point(field_set_allocated:wanderer.proto.Hitbox.bounds)
}

// repeated .wanderer.proto.Subhitbox boxes = 3;
inline int Hitbox::_internal_boxes_size() const {
  return boxes_.size();
}
inline int Hitbox::boxes_size() const {
  return _internal_boxes_size();
}
inline void Hitbox::clear_boxes() {
  boxes_.Clear();
}
inline ::wanderer::proto::Subhitbox* Hitbox::mutable_boxes(int index) {
  // @@protoc_insertion_point(field_mutable:wanderer.proto.Hitbox.boxes)
  return boxes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wanderer::proto::Subhitbox >*
Hitbox::mutable_boxes() {
  // @@protoc_insertion_point(field_mutable_list:wanderer.proto.Hitbox.boxes)
  return &boxes_;
}
inline const ::wanderer::proto::Subhitbox& Hitbox::_internal_boxes(int index) const {
  return boxes_.Get(index);
}
inline const ::wanderer::proto::Subhitbox& Hitbox::boxes(int index) const {
  // @@protoc_insertion_point(field_get:wanderer.proto.Hitbox.boxes)
  return _internal_boxes(index);
}
inline ::wanderer::proto::Subhitbox* Hitbox::_internal_add_boxes() {
  return boxes_.Add();
}
inline ::wanderer::proto::Subhitbox* Hitbox::add_boxes() {
  ::wanderer::proto::Subhitbox* _add = _internal_add_boxes();
  // @@protoc_insertion_point(field_add:wanderer.proto.Hitbox.boxes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wanderer::proto::Subhitbox >&
Hitbox::boxes() const {
  // @@protoc_insertion_point(field_list:wanderer.proto.Hitbox.boxes)
  return boxes_;
}

// optional bool enabled = 4;
inline bool Hitbox::_internal_has_enabled() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Hitbox::has_enabled() const {
  return _internal_has_enabled();
}
inline void Hitbox::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Hitbox::_internal_enabled() const {
  return enabled_;
}
inline bool Hitbox::enabled() const {
  // @@protoc_insertion_point(field_get:wanderer.proto.Hitbox.enabled)
  return _internal_enabled();
}
inline void Hitbox::_internal_set_enabled(bool value) {
  _has_bits_[0] |= 0x00000004u;
  enabled_ = value;
}
inline void Hitbox::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:wanderer.proto.Hitbox.enabled)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace wanderer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_hitbox_2eproto
