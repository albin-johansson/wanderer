// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tile_layer.proto

#include "tile_layer.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace wanderer {
namespace proto {
constexpr TileRow::TileRow(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tiles_()
  , _tiles_cached_byte_size_(0){}
struct TileRowDefaultTypeInternal {
  constexpr TileRowDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TileRowDefaultTypeInternal() {}
  union {
    TileRow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TileRowDefaultTypeInternal _TileRow_default_instance_;
constexpr TileMatrix::TileMatrix(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rows_(){}
struct TileMatrixDefaultTypeInternal {
  constexpr TileMatrixDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TileMatrixDefaultTypeInternal() {}
  union {
    TileMatrix _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TileMatrixDefaultTypeInternal _TileMatrix_default_instance_;
constexpr TileLayer::TileLayer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : matrix_(nullptr)
  , z_index_(0){}
struct TileLayerDefaultTypeInternal {
  constexpr TileLayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TileLayerDefaultTypeInternal() {}
  union {
    TileLayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TileLayerDefaultTypeInternal _TileLayer_default_instance_;
}  // namespace proto
}  // namespace wanderer
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tile_5flayer_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tile_5flayer_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tile_5flayer_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tile_5flayer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wanderer::proto::TileRow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wanderer::proto::TileRow, tiles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wanderer::proto::TileMatrix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wanderer::proto::TileMatrix, rows_),
  PROTOBUF_FIELD_OFFSET(::wanderer::proto::TileLayer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::wanderer::proto::TileLayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wanderer::proto::TileLayer, matrix_),
  PROTOBUF_FIELD_OFFSET(::wanderer::proto::TileLayer, z_index_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::wanderer::proto::TileRow)},
  { 7, -1, -1, sizeof(::wanderer::proto::TileMatrix)},
  { 14, 22, -1, sizeof(::wanderer::proto::TileLayer)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wanderer::proto::_TileRow_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wanderer::proto::_TileMatrix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wanderer::proto::_TileLayer_default_instance_),
};

const char descriptor_table_protodef_tile_5flayer_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020tile_layer.proto\022\016wanderer.proto\"\034\n\007Ti"
  "leRow\022\021\n\005tiles\030\001 \003(\rB\002\020\001\"3\n\nTileMatrix\022%"
  "\n\004rows\030\002 \003(\0132\027.wanderer.proto.TileRow\"i\n"
  "\tTileLayer\022/\n\006matrix\030\001 \001(\0132\032.wanderer.pr"
  "oto.TileMatrixH\000\210\001\001\022\024\n\007z_index\030\002 \001(\005H\001\210\001"
  "\001B\t\n\007_matrixB\n\n\010_z_indexb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tile_5flayer_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tile_5flayer_2eproto = {
  false, false, 232, descriptor_table_protodef_tile_5flayer_2eproto, "tile_layer.proto", 
  &descriptor_table_tile_5flayer_2eproto_once, nullptr, 0, 3,
  schemas, file_default_instances, TableStruct_tile_5flayer_2eproto::offsets,
  file_level_metadata_tile_5flayer_2eproto, file_level_enum_descriptors_tile_5flayer_2eproto, file_level_service_descriptors_tile_5flayer_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_tile_5flayer_2eproto_getter() {
  return &descriptor_table_tile_5flayer_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_tile_5flayer_2eproto(&descriptor_table_tile_5flayer_2eproto);
namespace wanderer {
namespace proto {

// ===================================================================

class TileRow::_Internal {
 public:
};

TileRow::TileRow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tiles_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:wanderer.proto.TileRow)
}
TileRow::TileRow(const TileRow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tiles_(from.tiles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:wanderer.proto.TileRow)
}

void TileRow::SharedCtor() {
}

TileRow::~TileRow() {
  // @@protoc_insertion_point(destructor:wanderer.proto.TileRow)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TileRow::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TileRow::ArenaDtor(void* object) {
  TileRow* _this = reinterpret_cast< TileRow* >(object);
  (void)_this;
}
void TileRow::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TileRow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TileRow::Clear() {
// @@protoc_insertion_point(message_clear_start:wanderer.proto.TileRow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tiles_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TileRow::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 tiles = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_tiles(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_tiles(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TileRow::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wanderer.proto.TileRow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 tiles = 1 [packed = true];
  {
    int byte_size = _tiles_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_tiles(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wanderer.proto.TileRow)
  return target;
}

size_t TileRow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wanderer.proto.TileRow)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 tiles = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->tiles_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tiles_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TileRow::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TileRow::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TileRow::GetClassData() const { return &_class_data_; }

void TileRow::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TileRow *>(to)->MergeFrom(
      static_cast<const TileRow &>(from));
}


void TileRow::MergeFrom(const TileRow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wanderer.proto.TileRow)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tiles_.MergeFrom(from.tiles_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TileRow::CopyFrom(const TileRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wanderer.proto.TileRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileRow::IsInitialized() const {
  return true;
}

void TileRow::InternalSwap(TileRow* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tiles_.InternalSwap(&other->tiles_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TileRow::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tile_5flayer_2eproto_getter, &descriptor_table_tile_5flayer_2eproto_once,
      file_level_metadata_tile_5flayer_2eproto[0]);
}

// ===================================================================

class TileMatrix::_Internal {
 public:
};

TileMatrix::TileMatrix(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  rows_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:wanderer.proto.TileMatrix)
}
TileMatrix::TileMatrix(const TileMatrix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rows_(from.rows_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:wanderer.proto.TileMatrix)
}

void TileMatrix::SharedCtor() {
}

TileMatrix::~TileMatrix() {
  // @@protoc_insertion_point(destructor:wanderer.proto.TileMatrix)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TileMatrix::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TileMatrix::ArenaDtor(void* object) {
  TileMatrix* _this = reinterpret_cast< TileMatrix* >(object);
  (void)_this;
}
void TileMatrix::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TileMatrix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TileMatrix::Clear() {
// @@protoc_insertion_point(message_clear_start:wanderer.proto.TileMatrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rows_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TileMatrix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .wanderer.proto.TileRow rows = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rows(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TileMatrix::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wanderer.proto.TileMatrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .wanderer.proto.TileRow rows = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rows_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_rows(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wanderer.proto.TileMatrix)
  return target;
}

size_t TileMatrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wanderer.proto.TileMatrix)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .wanderer.proto.TileRow rows = 2;
  total_size += 1UL * this->_internal_rows_size();
  for (const auto& msg : this->rows_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TileMatrix::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TileMatrix::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TileMatrix::GetClassData() const { return &_class_data_; }

void TileMatrix::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TileMatrix *>(to)->MergeFrom(
      static_cast<const TileMatrix &>(from));
}


void TileMatrix::MergeFrom(const TileMatrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wanderer.proto.TileMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rows_.MergeFrom(from.rows_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TileMatrix::CopyFrom(const TileMatrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wanderer.proto.TileMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileMatrix::IsInitialized() const {
  return true;
}

void TileMatrix::InternalSwap(TileMatrix* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  rows_.InternalSwap(&other->rows_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TileMatrix::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tile_5flayer_2eproto_getter, &descriptor_table_tile_5flayer_2eproto_once,
      file_level_metadata_tile_5flayer_2eproto[1]);
}

// ===================================================================

class TileLayer::_Internal {
 public:
  using HasBits = decltype(std::declval<TileLayer>()._has_bits_);
  static const ::wanderer::proto::TileMatrix& matrix(const TileLayer* msg);
  static void set_has_matrix(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_z_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::wanderer::proto::TileMatrix&
TileLayer::_Internal::matrix(const TileLayer* msg) {
  return *msg->matrix_;
}
TileLayer::TileLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:wanderer.proto.TileLayer)
}
TileLayer::TileLayer(const TileLayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_matrix()) {
    matrix_ = new ::wanderer::proto::TileMatrix(*from.matrix_);
  } else {
    matrix_ = nullptr;
  }
  z_index_ = from.z_index_;
  // @@protoc_insertion_point(copy_constructor:wanderer.proto.TileLayer)
}

void TileLayer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&matrix_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_index_) -
    reinterpret_cast<char*>(&matrix_)) + sizeof(z_index_));
}

TileLayer::~TileLayer() {
  // @@protoc_insertion_point(destructor:wanderer.proto.TileLayer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TileLayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete matrix_;
}

void TileLayer::ArenaDtor(void* object) {
  TileLayer* _this = reinterpret_cast< TileLayer* >(object);
  (void)_this;
}
void TileLayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TileLayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TileLayer::Clear() {
// @@protoc_insertion_point(message_clear_start:wanderer.proto.TileLayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(matrix_ != nullptr);
    matrix_->Clear();
  }
  z_index_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TileLayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .wanderer.proto.TileMatrix matrix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_matrix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 z_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_z_index(&has_bits);
          z_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TileLayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wanderer.proto.TileLayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .wanderer.proto.TileMatrix matrix = 1;
  if (_internal_has_matrix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::matrix(this), target, stream);
  }

  // optional int32 z_index = 2;
  if (_internal_has_z_index()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_z_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wanderer.proto.TileLayer)
  return target;
}

size_t TileLayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wanderer.proto.TileLayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .wanderer.proto.TileMatrix matrix = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *matrix_);
    }

    // optional int32 z_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_z_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TileLayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TileLayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TileLayer::GetClassData() const { return &_class_data_; }

void TileLayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TileLayer *>(to)->MergeFrom(
      static_cast<const TileLayer &>(from));
}


void TileLayer::MergeFrom(const TileLayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wanderer.proto.TileLayer)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_matrix()->::wanderer::proto::TileMatrix::MergeFrom(from._internal_matrix());
    }
    if (cached_has_bits & 0x00000002u) {
      z_index_ = from.z_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TileLayer::CopyFrom(const TileLayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wanderer.proto.TileLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileLayer::IsInitialized() const {
  return true;
}

void TileLayer::InternalSwap(TileLayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TileLayer, z_index_)
      + sizeof(TileLayer::z_index_)
      - PROTOBUF_FIELD_OFFSET(TileLayer, matrix_)>(
          reinterpret_cast<char*>(&matrix_),
          reinterpret_cast<char*>(&other->matrix_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TileLayer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tile_5flayer_2eproto_getter, &descriptor_table_tile_5flayer_2eproto_once,
      file_level_metadata_tile_5flayer_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace wanderer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::wanderer::proto::TileRow* Arena::CreateMaybeMessage< ::wanderer::proto::TileRow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wanderer::proto::TileRow >(arena);
}
template<> PROTOBUF_NOINLINE ::wanderer::proto::TileMatrix* Arena::CreateMaybeMessage< ::wanderer::proto::TileMatrix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wanderer::proto::TileMatrix >(arena);
}
template<> PROTOBUF_NOINLINE ::wanderer::proto::TileLayer* Arena::CreateMaybeMessage< ::wanderer::proto::TileLayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wanderer::proto::TileLayer >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
