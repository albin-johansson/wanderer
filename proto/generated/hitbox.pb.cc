// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hitbox.proto

#include "hitbox.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace wanderer {
namespace proto {
constexpr Subhitbox::Subhitbox(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : offset_(nullptr)
  , size_(nullptr){}
struct SubhitboxDefaultTypeInternal {
  constexpr SubhitboxDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubhitboxDefaultTypeInternal() {}
  union {
    Subhitbox _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubhitboxDefaultTypeInternal _Subhitbox_default_instance_;
constexpr Hitbox::Hitbox(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : boxes_()
  , origin_(nullptr)
  , bounds_(nullptr)
  , enabled_(false){}
struct HitboxDefaultTypeInternal {
  constexpr HitboxDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HitboxDefaultTypeInternal() {}
  union {
    Hitbox _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HitboxDefaultTypeInternal _Hitbox_default_instance_;
}  // namespace proto
}  // namespace wanderer
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_hitbox_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_hitbox_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_hitbox_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_hitbox_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::wanderer::proto::Subhitbox, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::wanderer::proto::Subhitbox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wanderer::proto::Subhitbox, offset_),
  PROTOBUF_FIELD_OFFSET(::wanderer::proto::Subhitbox, size_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::wanderer::proto::Hitbox, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::wanderer::proto::Hitbox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wanderer::proto::Hitbox, origin_),
  PROTOBUF_FIELD_OFFSET(::wanderer::proto::Hitbox, bounds_),
  PROTOBUF_FIELD_OFFSET(::wanderer::proto::Hitbox, boxes_),
  PROTOBUF_FIELD_OFFSET(::wanderer::proto::Hitbox, enabled_),
  0,
  1,
  ~0u,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::wanderer::proto::Subhitbox)},
  { 10, 20, -1, sizeof(::wanderer::proto::Hitbox)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wanderer::proto::_Subhitbox_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wanderer::proto::_Hitbox_default_instance_),
};

const char descriptor_table_protodef_hitbox_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014hitbox.proto\022\016wanderer.proto\032\014float2.p"
  "roto\032\nrect.proto\"w\n\tSubhitbox\022+\n\006offset\030"
  "\001 \001(\0132\026.wanderer.proto.float2H\000\210\001\001\022)\n\004si"
  "ze\030\002 \001(\0132\026.wanderer.proto.float2H\001\210\001\001B\t\n"
  "\007_offsetB\007\n\005_size\"\303\001\n\006Hitbox\022+\n\006origin\030\001"
  " \001(\0132\026.wanderer.proto.float2H\000\210\001\001\022*\n\006bou"
  "nds\030\002 \001(\0132\025.wanderer.proto.frectH\001\210\001\001\022(\n"
  "\005boxes\030\003 \003(\0132\031.wanderer.proto.Subhitbox\022"
  "\024\n\007enabled\030\004 \001(\010H\002\210\001\001B\t\n\007_originB\t\n\007_bou"
  "ndsB\n\n\010_enabledb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_hitbox_2eproto_deps[2] = {
  &::descriptor_table_float2_2eproto,
  &::descriptor_table_rect_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_hitbox_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hitbox_2eproto = {
  false, false, 383, descriptor_table_protodef_hitbox_2eproto, "hitbox.proto", 
  &descriptor_table_hitbox_2eproto_once, descriptor_table_hitbox_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_hitbox_2eproto::offsets,
  file_level_metadata_hitbox_2eproto, file_level_enum_descriptors_hitbox_2eproto, file_level_service_descriptors_hitbox_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_hitbox_2eproto_getter() {
  return &descriptor_table_hitbox_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_hitbox_2eproto(&descriptor_table_hitbox_2eproto);
namespace wanderer {
namespace proto {

// ===================================================================

class Subhitbox::_Internal {
 public:
  using HasBits = decltype(std::declval<Subhitbox>()._has_bits_);
  static const ::wanderer::proto::float2& offset(const Subhitbox* msg);
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::wanderer::proto::float2& size(const Subhitbox* msg);
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::wanderer::proto::float2&
Subhitbox::_Internal::offset(const Subhitbox* msg) {
  return *msg->offset_;
}
const ::wanderer::proto::float2&
Subhitbox::_Internal::size(const Subhitbox* msg) {
  return *msg->size_;
}
void Subhitbox::clear_offset() {
  if (offset_ != nullptr) offset_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Subhitbox::clear_size() {
  if (size_ != nullptr) size_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
Subhitbox::Subhitbox(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:wanderer.proto.Subhitbox)
}
Subhitbox::Subhitbox(const Subhitbox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_offset()) {
    offset_ = new ::wanderer::proto::float2(*from.offset_);
  } else {
    offset_ = nullptr;
  }
  if (from._internal_has_size()) {
    size_ = new ::wanderer::proto::float2(*from.size_);
  } else {
    size_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:wanderer.proto.Subhitbox)
}

void Subhitbox::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&offset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(size_));
}

Subhitbox::~Subhitbox() {
  // @@protoc_insertion_point(destructor:wanderer.proto.Subhitbox)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Subhitbox::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete offset_;
  if (this != internal_default_instance()) delete size_;
}

void Subhitbox::ArenaDtor(void* object) {
  Subhitbox* _this = reinterpret_cast< Subhitbox* >(object);
  (void)_this;
}
void Subhitbox::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Subhitbox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Subhitbox::Clear() {
// @@protoc_insertion_point(message_clear_start:wanderer.proto.Subhitbox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(offset_ != nullptr);
      offset_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(size_ != nullptr);
      size_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Subhitbox::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .wanderer.proto.float2 offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_offset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .wanderer.proto.float2 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Subhitbox::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wanderer.proto.Subhitbox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .wanderer.proto.float2 offset = 1;
  if (_internal_has_offset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::offset(this), target, stream);
  }

  // optional .wanderer.proto.float2 size = 2;
  if (_internal_has_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::size(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wanderer.proto.Subhitbox)
  return target;
}

size_t Subhitbox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wanderer.proto.Subhitbox)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .wanderer.proto.float2 offset = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *offset_);
    }

    // optional .wanderer.proto.float2 size = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *size_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Subhitbox::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Subhitbox::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Subhitbox::GetClassData() const { return &_class_data_; }

void Subhitbox::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Subhitbox *>(to)->MergeFrom(
      static_cast<const Subhitbox &>(from));
}


void Subhitbox::MergeFrom(const Subhitbox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wanderer.proto.Subhitbox)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_offset()->::wanderer::proto::float2::MergeFrom(from._internal_offset());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_size()->::wanderer::proto::float2::MergeFrom(from._internal_size());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Subhitbox::CopyFrom(const Subhitbox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wanderer.proto.Subhitbox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Subhitbox::IsInitialized() const {
  return true;
}

void Subhitbox::InternalSwap(Subhitbox* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Subhitbox, size_)
      + sizeof(Subhitbox::size_)
      - PROTOBUF_FIELD_OFFSET(Subhitbox, offset_)>(
          reinterpret_cast<char*>(&offset_),
          reinterpret_cast<char*>(&other->offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Subhitbox::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_hitbox_2eproto_getter, &descriptor_table_hitbox_2eproto_once,
      file_level_metadata_hitbox_2eproto[0]);
}

// ===================================================================

class Hitbox::_Internal {
 public:
  using HasBits = decltype(std::declval<Hitbox>()._has_bits_);
  static const ::wanderer::proto::float2& origin(const Hitbox* msg);
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::wanderer::proto::frect& bounds(const Hitbox* msg);
  static void set_has_bounds(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::wanderer::proto::float2&
Hitbox::_Internal::origin(const Hitbox* msg) {
  return *msg->origin_;
}
const ::wanderer::proto::frect&
Hitbox::_Internal::bounds(const Hitbox* msg) {
  return *msg->bounds_;
}
void Hitbox::clear_origin() {
  if (origin_ != nullptr) origin_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Hitbox::clear_bounds() {
  if (bounds_ != nullptr) bounds_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
Hitbox::Hitbox(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  boxes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:wanderer.proto.Hitbox)
}
Hitbox::Hitbox(const Hitbox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      boxes_(from.boxes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_origin()) {
    origin_ = new ::wanderer::proto::float2(*from.origin_);
  } else {
    origin_ = nullptr;
  }
  if (from._internal_has_bounds()) {
    bounds_ = new ::wanderer::proto::frect(*from.bounds_);
  } else {
    bounds_ = nullptr;
  }
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:wanderer.proto.Hitbox)
}

void Hitbox::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&origin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&origin_)) + sizeof(enabled_));
}

Hitbox::~Hitbox() {
  // @@protoc_insertion_point(destructor:wanderer.proto.Hitbox)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Hitbox::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete origin_;
  if (this != internal_default_instance()) delete bounds_;
}

void Hitbox::ArenaDtor(void* object) {
  Hitbox* _this = reinterpret_cast< Hitbox* >(object);
  (void)_this;
}
void Hitbox::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Hitbox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Hitbox::Clear() {
// @@protoc_insertion_point(message_clear_start:wanderer.proto.Hitbox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  boxes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(origin_ != nullptr);
      origin_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bounds_ != nullptr);
      bounds_->Clear();
    }
  }
  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Hitbox::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .wanderer.proto.float2 origin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .wanderer.proto.frect bounds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bounds(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .wanderer.proto.Subhitbox boxes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_boxes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool enabled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Hitbox::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wanderer.proto.Hitbox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .wanderer.proto.float2 origin = 1;
  if (_internal_has_origin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::origin(this), target, stream);
  }

  // optional .wanderer.proto.frect bounds = 2;
  if (_internal_has_bounds()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bounds(this), target, stream);
  }

  // repeated .wanderer.proto.Subhitbox boxes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_boxes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_boxes(i), target, stream);
  }

  // optional bool enabled = 4;
  if (_internal_has_enabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wanderer.proto.Hitbox)
  return target;
}

size_t Hitbox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wanderer.proto.Hitbox)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .wanderer.proto.Subhitbox boxes = 3;
  total_size += 1UL * this->_internal_boxes_size();
  for (const auto& msg : this->boxes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .wanderer.proto.float2 origin = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *origin_);
    }

    // optional .wanderer.proto.frect bounds = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bounds_);
    }

    // optional bool enabled = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Hitbox::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Hitbox::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Hitbox::GetClassData() const { return &_class_data_; }

void Hitbox::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Hitbox *>(to)->MergeFrom(
      static_cast<const Hitbox &>(from));
}


void Hitbox::MergeFrom(const Hitbox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wanderer.proto.Hitbox)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  boxes_.MergeFrom(from.boxes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_origin()->::wanderer::proto::float2::MergeFrom(from._internal_origin());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_bounds()->::wanderer::proto::frect::MergeFrom(from._internal_bounds());
    }
    if (cached_has_bits & 0x00000004u) {
      enabled_ = from.enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Hitbox::CopyFrom(const Hitbox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wanderer.proto.Hitbox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hitbox::IsInitialized() const {
  return true;
}

void Hitbox::InternalSwap(Hitbox* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  boxes_.InternalSwap(&other->boxes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Hitbox, enabled_)
      + sizeof(Hitbox::enabled_)
      - PROTOBUF_FIELD_OFFSET(Hitbox, origin_)>(
          reinterpret_cast<char*>(&origin_),
          reinterpret_cast<char*>(&other->origin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Hitbox::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_hitbox_2eproto_getter, &descriptor_table_hitbox_2eproto_once,
      file_level_metadata_hitbox_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace wanderer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::wanderer::proto::Subhitbox* Arena::CreateMaybeMessage< ::wanderer::proto::Subhitbox >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wanderer::proto::Subhitbox >(arena);
}
template<> PROTOBUF_NOINLINE ::wanderer::proto::Hitbox* Arena::CreateMaybeMessage< ::wanderer::proto::Hitbox >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wanderer::proto::Hitbox >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
