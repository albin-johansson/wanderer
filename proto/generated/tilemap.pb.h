// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tilemap.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tilemap_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tilemap_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "area.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tilemap_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tilemap_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tilemap_2eproto;
namespace wanderer {
namespace protobuf {
class tilemap;
struct tilemapDefaultTypeInternal;
extern tilemapDefaultTypeInternal _tilemap_default_instance_;
}  // namespace protobuf
}  // namespace wanderer
PROTOBUF_NAMESPACE_OPEN
template<> ::wanderer::protobuf::tilemap* Arena::CreateMaybeMessage<::wanderer::protobuf::tilemap>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace wanderer {
namespace protobuf {

// ===================================================================

class tilemap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wanderer.protobuf.tilemap) */ {
 public:
  inline tilemap() : tilemap(nullptr) {}
  ~tilemap() override;
  explicit constexpr tilemap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  tilemap(const tilemap& from);
  tilemap(tilemap&& from) noexcept
    : tilemap() {
    *this = ::std::move(from);
  }

  inline tilemap& operator=(const tilemap& from) {
    CopyFrom(from);
    return *this;
  }
  inline tilemap& operator=(tilemap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const tilemap& default_instance() {
    return *internal_default_instance();
  }
  static inline const tilemap* internal_default_instance() {
    return reinterpret_cast<const tilemap*>(
               &_tilemap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(tilemap& a, tilemap& b) {
    a.Swap(&b);
  }
  inline void Swap(tilemap* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(tilemap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline tilemap* New() const final {
    return new tilemap();
  }

  tilemap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<tilemap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const tilemap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const tilemap& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(tilemap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wanderer.protobuf.tilemap";
  }
  protected:
  explicit tilemap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 3,
    kIdFieldNumber = 1,
    kHumanoidLayerIndexFieldNumber = 2,
    kRowCountFieldNumber = 4,
    kColumnCountFieldNumber = 5,
  };
  // optional .wanderer.protobuf.farea size = 3;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::wanderer::protobuf::farea& size() const;
  PROTOBUF_MUST_USE_RESULT ::wanderer::protobuf::farea* release_size();
  ::wanderer::protobuf::farea* mutable_size();
  void set_allocated_size(::wanderer::protobuf::farea* size);
  private:
  const ::wanderer::protobuf::farea& _internal_size() const;
  ::wanderer::protobuf::farea* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::wanderer::protobuf::farea* size);
  ::wanderer::protobuf::farea* unsafe_arena_release_size();

  // optional int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 humanoid_layer_index = 2;
  bool has_humanoid_layer_index() const;
  private:
  bool _internal_has_humanoid_layer_index() const;
  public:
  void clear_humanoid_layer_index();
  ::PROTOBUF_NAMESPACE_ID::int32 humanoid_layer_index() const;
  void set_humanoid_layer_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_humanoid_layer_index() const;
  void _internal_set_humanoid_layer_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint64 row_count = 4;
  bool has_row_count() const;
  private:
  bool _internal_has_row_count() const;
  public:
  void clear_row_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 row_count() const;
  void set_row_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_row_count() const;
  void _internal_set_row_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 column_count = 5;
  bool has_column_count() const;
  private:
  bool _internal_has_column_count() const;
  public:
  void clear_column_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 column_count() const;
  void set_column_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_column_count() const;
  void _internal_set_column_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:wanderer.protobuf.tilemap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::wanderer::protobuf::farea* size_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 humanoid_layer_index_;
  ::PROTOBUF_NAMESPACE_ID::uint64 row_count_;
  ::PROTOBUF_NAMESPACE_ID::uint64 column_count_;
  friend struct ::TableStruct_tilemap_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// tilemap

// optional int32 id = 1;
inline bool tilemap::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool tilemap::has_id() const {
  return _internal_has_id();
}
inline void tilemap::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 tilemap::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 tilemap::id() const {
  // @@protoc_insertion_point(field_get:wanderer.protobuf.tilemap.id)
  return _internal_id();
}
inline void tilemap::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void tilemap::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:wanderer.protobuf.tilemap.id)
}

// optional int32 humanoid_layer_index = 2;
inline bool tilemap::_internal_has_humanoid_layer_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool tilemap::has_humanoid_layer_index() const {
  return _internal_has_humanoid_layer_index();
}
inline void tilemap::clear_humanoid_layer_index() {
  humanoid_layer_index_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 tilemap::_internal_humanoid_layer_index() const {
  return humanoid_layer_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 tilemap::humanoid_layer_index() const {
  // @@protoc_insertion_point(field_get:wanderer.protobuf.tilemap.humanoid_layer_index)
  return _internal_humanoid_layer_index();
}
inline void tilemap::_internal_set_humanoid_layer_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  humanoid_layer_index_ = value;
}
inline void tilemap::set_humanoid_layer_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_humanoid_layer_index(value);
  // @@protoc_insertion_point(field_set:wanderer.protobuf.tilemap.humanoid_layer_index)
}

// optional .wanderer.protobuf.farea size = 3;
inline bool tilemap::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || size_ != nullptr);
  return value;
}
inline bool tilemap::has_size() const {
  return _internal_has_size();
}
inline const ::wanderer::protobuf::farea& tilemap::_internal_size() const {
  const ::wanderer::protobuf::farea* p = size_;
  return p != nullptr ? *p : reinterpret_cast<const ::wanderer::protobuf::farea&>(
      ::wanderer::protobuf::_farea_default_instance_);
}
inline const ::wanderer::protobuf::farea& tilemap::size() const {
  // @@protoc_insertion_point(field_get:wanderer.protobuf.tilemap.size)
  return _internal_size();
}
inline void tilemap::unsafe_arena_set_allocated_size(
    ::wanderer::protobuf::farea* size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_);
  }
  size_ = size;
  if (size) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wanderer.protobuf.tilemap.size)
}
inline ::wanderer::protobuf::farea* tilemap::release_size() {
  _has_bits_[0] &= ~0x00000001u;
  ::wanderer::protobuf::farea* temp = size_;
  size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::wanderer::protobuf::farea* tilemap::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:wanderer.protobuf.tilemap.size)
  _has_bits_[0] &= ~0x00000001u;
  ::wanderer::protobuf::farea* temp = size_;
  size_ = nullptr;
  return temp;
}
inline ::wanderer::protobuf::farea* tilemap::_internal_mutable_size() {
  _has_bits_[0] |= 0x00000001u;
  if (size_ == nullptr) {
    auto* p = CreateMaybeMessage<::wanderer::protobuf::farea>(GetArenaForAllocation());
    size_ = p;
  }
  return size_;
}
inline ::wanderer::protobuf::farea* tilemap::mutable_size() {
  ::wanderer::protobuf::farea* _msg = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:wanderer.protobuf.tilemap.size)
  return _msg;
}
inline void tilemap::set_allocated_size(::wanderer::protobuf::farea* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_);
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size));
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  size_ = size;
  // @@protoc_insertion_point(field_set_allocated:wanderer.protobuf.tilemap.size)
}

// optional uint64 row_count = 4;
inline bool tilemap::_internal_has_row_count() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool tilemap::has_row_count() const {
  return _internal_has_row_count();
}
inline void tilemap::clear_row_count() {
  row_count_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 tilemap::_internal_row_count() const {
  return row_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 tilemap::row_count() const {
  // @@protoc_insertion_point(field_get:wanderer.protobuf.tilemap.row_count)
  return _internal_row_count();
}
inline void tilemap::_internal_set_row_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  row_count_ = value;
}
inline void tilemap::set_row_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_row_count(value);
  // @@protoc_insertion_point(field_set:wanderer.protobuf.tilemap.row_count)
}

// optional uint64 column_count = 5;
inline bool tilemap::_internal_has_column_count() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool tilemap::has_column_count() const {
  return _internal_has_column_count();
}
inline void tilemap::clear_column_count() {
  column_count_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 tilemap::_internal_column_count() const {
  return column_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 tilemap::column_count() const {
  // @@protoc_insertion_point(field_get:wanderer.protobuf.tilemap.column_count)
  return _internal_column_count();
}
inline void tilemap::_internal_set_column_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  column_count_ = value;
}
inline void tilemap::set_column_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_column_count(value);
  // @@protoc_insertion_point(field_set:wanderer.protobuf.tilemap.column_count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace wanderer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tilemap_2eproto
