// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: depth_drawable.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_depth_5fdrawable_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_depth_5fdrawable_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "rect.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_depth_5fdrawable_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_depth_5fdrawable_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_depth_5fdrawable_2eproto;
namespace wanderer {
namespace protobuf {
class depth_drawable;
struct depth_drawableDefaultTypeInternal;
extern depth_drawableDefaultTypeInternal _depth_drawable_default_instance_;
}  // namespace protobuf
}  // namespace wanderer
PROTOBUF_NAMESPACE_OPEN
template<> ::wanderer::protobuf::depth_drawable* Arena::CreateMaybeMessage<::wanderer::protobuf::depth_drawable>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace wanderer {
namespace protobuf {

// ===================================================================

class depth_drawable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wanderer.protobuf.depth_drawable) */ {
 public:
  inline depth_drawable() : depth_drawable(nullptr) {}
  ~depth_drawable() override;
  explicit constexpr depth_drawable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  depth_drawable(const depth_drawable& from);
  depth_drawable(depth_drawable&& from) noexcept
    : depth_drawable() {
    *this = ::std::move(from);
  }

  inline depth_drawable& operator=(const depth_drawable& from) {
    CopyFrom(from);
    return *this;
  }
  inline depth_drawable& operator=(depth_drawable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const depth_drawable& default_instance() {
    return *internal_default_instance();
  }
  static inline const depth_drawable* internal_default_instance() {
    return reinterpret_cast<const depth_drawable*>(
               &_depth_drawable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(depth_drawable& a, depth_drawable& b) {
    a.Swap(&b);
  }
  inline void Swap(depth_drawable* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(depth_drawable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline depth_drawable* New() const final {
    return new depth_drawable();
  }

  depth_drawable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<depth_drawable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const depth_drawable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const depth_drawable& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(depth_drawable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wanderer.protobuf.depth_drawable";
  }
  protected:
  explicit depth_drawable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcFieldNumber = 2,
    kDstFieldNumber = 3,
    kTextureIndexFieldNumber = 1,
    kLayerIndexFieldNumber = 4,
    kDepthIndexFieldNumber = 5,
  };
  // optional .wanderer.protobuf.irect src = 2;
  bool has_src() const;
  private:
  bool _internal_has_src() const;
  public:
  void clear_src();
  const ::wanderer::protobuf::irect& src() const;
  PROTOBUF_MUST_USE_RESULT ::wanderer::protobuf::irect* release_src();
  ::wanderer::protobuf::irect* mutable_src();
  void set_allocated_src(::wanderer::protobuf::irect* src);
  private:
  const ::wanderer::protobuf::irect& _internal_src() const;
  ::wanderer::protobuf::irect* _internal_mutable_src();
  public:
  void unsafe_arena_set_allocated_src(
      ::wanderer::protobuf::irect* src);
  ::wanderer::protobuf::irect* unsafe_arena_release_src();

  // optional .wanderer.protobuf.frect dst = 3;
  bool has_dst() const;
  private:
  bool _internal_has_dst() const;
  public:
  void clear_dst();
  const ::wanderer::protobuf::frect& dst() const;
  PROTOBUF_MUST_USE_RESULT ::wanderer::protobuf::frect* release_dst();
  ::wanderer::protobuf::frect* mutable_dst();
  void set_allocated_dst(::wanderer::protobuf::frect* dst);
  private:
  const ::wanderer::protobuf::frect& _internal_dst() const;
  ::wanderer::protobuf::frect* _internal_mutable_dst();
  public:
  void unsafe_arena_set_allocated_dst(
      ::wanderer::protobuf::frect* dst);
  ::wanderer::protobuf::frect* unsafe_arena_release_dst();

  // optional uint64 texture_index = 1;
  bool has_texture_index() const;
  private:
  bool _internal_has_texture_index() const;
  public:
  void clear_texture_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 texture_index() const;
  void set_texture_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_texture_index() const;
  void _internal_set_texture_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 layer_index = 4;
  bool has_layer_index() const;
  private:
  bool _internal_has_layer_index() const;
  public:
  void clear_layer_index();
  ::PROTOBUF_NAMESPACE_ID::int32 layer_index() const;
  void set_layer_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_layer_index() const;
  void _internal_set_layer_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 depth_index = 5;
  bool has_depth_index() const;
  private:
  bool _internal_has_depth_index() const;
  public:
  void clear_depth_index();
  ::PROTOBUF_NAMESPACE_ID::int32 depth_index() const;
  void set_depth_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_depth_index() const;
  void _internal_set_depth_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:wanderer.protobuf.depth_drawable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::wanderer::protobuf::irect* src_;
  ::wanderer::protobuf::frect* dst_;
  ::PROTOBUF_NAMESPACE_ID::uint64 texture_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 layer_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 depth_index_;
  friend struct ::TableStruct_depth_5fdrawable_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// depth_drawable

// optional uint64 texture_index = 1;
inline bool depth_drawable::_internal_has_texture_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool depth_drawable::has_texture_index() const {
  return _internal_has_texture_index();
}
inline void depth_drawable::clear_texture_index() {
  texture_index_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 depth_drawable::_internal_texture_index() const {
  return texture_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 depth_drawable::texture_index() const {
  // @@protoc_insertion_point(field_get:wanderer.protobuf.depth_drawable.texture_index)
  return _internal_texture_index();
}
inline void depth_drawable::_internal_set_texture_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  texture_index_ = value;
}
inline void depth_drawable::set_texture_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_texture_index(value);
  // @@protoc_insertion_point(field_set:wanderer.protobuf.depth_drawable.texture_index)
}

// optional .wanderer.protobuf.irect src = 2;
inline bool depth_drawable::_internal_has_src() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || src_ != nullptr);
  return value;
}
inline bool depth_drawable::has_src() const {
  return _internal_has_src();
}
inline const ::wanderer::protobuf::irect& depth_drawable::_internal_src() const {
  const ::wanderer::protobuf::irect* p = src_;
  return p != nullptr ? *p : reinterpret_cast<const ::wanderer::protobuf::irect&>(
      ::wanderer::protobuf::_irect_default_instance_);
}
inline const ::wanderer::protobuf::irect& depth_drawable::src() const {
  // @@protoc_insertion_point(field_get:wanderer.protobuf.depth_drawable.src)
  return _internal_src();
}
inline void depth_drawable::unsafe_arena_set_allocated_src(
    ::wanderer::protobuf::irect* src) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(src_);
  }
  src_ = src;
  if (src) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wanderer.protobuf.depth_drawable.src)
}
inline ::wanderer::protobuf::irect* depth_drawable::release_src() {
  _has_bits_[0] &= ~0x00000001u;
  ::wanderer::protobuf::irect* temp = src_;
  src_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::wanderer::protobuf::irect* depth_drawable::unsafe_arena_release_src() {
  // @@protoc_insertion_point(field_release:wanderer.protobuf.depth_drawable.src)
  _has_bits_[0] &= ~0x00000001u;
  ::wanderer::protobuf::irect* temp = src_;
  src_ = nullptr;
  return temp;
}
inline ::wanderer::protobuf::irect* depth_drawable::_internal_mutable_src() {
  _has_bits_[0] |= 0x00000001u;
  if (src_ == nullptr) {
    auto* p = CreateMaybeMessage<::wanderer::protobuf::irect>(GetArenaForAllocation());
    src_ = p;
  }
  return src_;
}
inline ::wanderer::protobuf::irect* depth_drawable::mutable_src() {
  ::wanderer::protobuf::irect* _msg = _internal_mutable_src();
  // @@protoc_insertion_point(field_mutable:wanderer.protobuf.depth_drawable.src)
  return _msg;
}
inline void depth_drawable::set_allocated_src(::wanderer::protobuf::irect* src) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(src_);
  }
  if (src) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(src));
    if (message_arena != submessage_arena) {
      src = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, src, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  src_ = src;
  // @@protoc_insertion_point(field_set_allocated:wanderer.protobuf.depth_drawable.src)
}

// optional .wanderer.protobuf.frect dst = 3;
inline bool depth_drawable::_internal_has_dst() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || dst_ != nullptr);
  return value;
}
inline bool depth_drawable::has_dst() const {
  return _internal_has_dst();
}
inline const ::wanderer::protobuf::frect& depth_drawable::_internal_dst() const {
  const ::wanderer::protobuf::frect* p = dst_;
  return p != nullptr ? *p : reinterpret_cast<const ::wanderer::protobuf::frect&>(
      ::wanderer::protobuf::_frect_default_instance_);
}
inline const ::wanderer::protobuf::frect& depth_drawable::dst() const {
  // @@protoc_insertion_point(field_get:wanderer.protobuf.depth_drawable.dst)
  return _internal_dst();
}
inline void depth_drawable::unsafe_arena_set_allocated_dst(
    ::wanderer::protobuf::frect* dst) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dst_);
  }
  dst_ = dst;
  if (dst) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wanderer.protobuf.depth_drawable.dst)
}
inline ::wanderer::protobuf::frect* depth_drawable::release_dst() {
  _has_bits_[0] &= ~0x00000002u;
  ::wanderer::protobuf::frect* temp = dst_;
  dst_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::wanderer::protobuf::frect* depth_drawable::unsafe_arena_release_dst() {
  // @@protoc_insertion_point(field_release:wanderer.protobuf.depth_drawable.dst)
  _has_bits_[0] &= ~0x00000002u;
  ::wanderer::protobuf::frect* temp = dst_;
  dst_ = nullptr;
  return temp;
}
inline ::wanderer::protobuf::frect* depth_drawable::_internal_mutable_dst() {
  _has_bits_[0] |= 0x00000002u;
  if (dst_ == nullptr) {
    auto* p = CreateMaybeMessage<::wanderer::protobuf::frect>(GetArenaForAllocation());
    dst_ = p;
  }
  return dst_;
}
inline ::wanderer::protobuf::frect* depth_drawable::mutable_dst() {
  ::wanderer::protobuf::frect* _msg = _internal_mutable_dst();
  // @@protoc_insertion_point(field_mutable:wanderer.protobuf.depth_drawable.dst)
  return _msg;
}
inline void depth_drawable::set_allocated_dst(::wanderer::protobuf::frect* dst) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dst_);
  }
  if (dst) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dst));
    if (message_arena != submessage_arena) {
      dst = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dst, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  dst_ = dst;
  // @@protoc_insertion_point(field_set_allocated:wanderer.protobuf.depth_drawable.dst)
}

// optional int32 layer_index = 4;
inline bool depth_drawable::_internal_has_layer_index() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool depth_drawable::has_layer_index() const {
  return _internal_has_layer_index();
}
inline void depth_drawable::clear_layer_index() {
  layer_index_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 depth_drawable::_internal_layer_index() const {
  return layer_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 depth_drawable::layer_index() const {
  // @@protoc_insertion_point(field_get:wanderer.protobuf.depth_drawable.layer_index)
  return _internal_layer_index();
}
inline void depth_drawable::_internal_set_layer_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  layer_index_ = value;
}
inline void depth_drawable::set_layer_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_layer_index(value);
  // @@protoc_insertion_point(field_set:wanderer.protobuf.depth_drawable.layer_index)
}

// optional int32 depth_index = 5;
inline bool depth_drawable::_internal_has_depth_index() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool depth_drawable::has_depth_index() const {
  return _internal_has_depth_index();
}
inline void depth_drawable::clear_depth_index() {
  depth_index_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 depth_drawable::_internal_depth_index() const {
  return depth_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 depth_drawable::depth_index() const {
  // @@protoc_insertion_point(field_get:wanderer.protobuf.depth_drawable.depth_index)
  return _internal_depth_index();
}
inline void depth_drawable::_internal_set_depth_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  depth_index_ = value;
}
inline void depth_drawable::set_depth_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_depth_index(value);
  // @@protoc_insertion_point(field_set:wanderer.protobuf.depth_drawable.depth_index)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace wanderer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_depth_5fdrawable_2eproto
