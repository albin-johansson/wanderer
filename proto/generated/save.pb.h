// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: save.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_save_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_save_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "level.pb.h"
#include "time_of_day.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_save_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_save_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_save_2eproto;
namespace wanderer {
namespace proto {
class Save;
struct SaveDefaultTypeInternal;
extern SaveDefaultTypeInternal _Save_default_instance_;
class SharedData;
struct SharedDataDefaultTypeInternal;
extern SharedDataDefaultTypeInternal _SharedData_default_instance_;
}  // namespace proto
}  // namespace wanderer
PROTOBUF_NAMESPACE_OPEN
template<> ::wanderer::proto::Save* Arena::CreateMaybeMessage<::wanderer::proto::Save>(Arena*);
template<> ::wanderer::proto::SharedData* Arena::CreateMaybeMessage<::wanderer::proto::SharedData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace wanderer {
namespace proto {

// ===================================================================

class SharedData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wanderer.proto.SharedData) */ {
 public:
  inline SharedData() : SharedData(nullptr) {}
  ~SharedData() override;
  explicit constexpr SharedData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharedData(const SharedData& from);
  SharedData(SharedData&& from) noexcept
    : SharedData() {
    *this = ::std::move(from);
  }

  inline SharedData& operator=(const SharedData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharedData& operator=(SharedData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SharedData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharedData* internal_default_instance() {
    return reinterpret_cast<const SharedData*>(
               &_SharedData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SharedData& a, SharedData& b) {
    a.Swap(&b);
  }
  inline void Swap(SharedData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharedData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SharedData* New() const final {
    return new SharedData();
  }

  SharedData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SharedData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SharedData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SharedData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SharedData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wanderer.proto.SharedData";
  }
  protected:
  explicit SharedData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
  };
  // optional .wanderer.proto.TimeOfDay time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const ::wanderer::proto::TimeOfDay& time() const;
  PROTOBUF_MUST_USE_RESULT ::wanderer::proto::TimeOfDay* release_time();
  ::wanderer::proto::TimeOfDay* mutable_time();
  void set_allocated_time(::wanderer::proto::TimeOfDay* time);
  private:
  const ::wanderer::proto::TimeOfDay& _internal_time() const;
  ::wanderer::proto::TimeOfDay* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::wanderer::proto::TimeOfDay* time);
  ::wanderer::proto::TimeOfDay* unsafe_arena_release_time();

  // @@protoc_insertion_point(class_scope:wanderer.proto.SharedData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::wanderer::proto::TimeOfDay* time_;
  friend struct ::TableStruct_save_2eproto;
};
// -------------------------------------------------------------------

class Save final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wanderer.proto.Save) */ {
 public:
  inline Save() : Save(nullptr) {}
  ~Save() override;
  explicit constexpr Save(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Save(const Save& from);
  Save(Save&& from) noexcept
    : Save() {
    *this = ::std::move(from);
  }

  inline Save& operator=(const Save& from) {
    CopyFrom(from);
    return *this;
  }
  inline Save& operator=(Save&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Save& default_instance() {
    return *internal_default_instance();
  }
  static inline const Save* internal_default_instance() {
    return reinterpret_cast<const Save*>(
               &_Save_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Save& a, Save& b) {
    a.Swap(&b);
  }
  inline void Swap(Save* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Save* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Save* New() const final {
    return new Save();
  }

  Save* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Save>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Save& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Save& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Save* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wanderer.proto.Save";
  }
  protected:
  explicit Save(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelsFieldNumber = 3,
    kSharedFieldNumber = 2,
    kCurrentLevelIdFieldNumber = 1,
  };
  // repeated .wanderer.proto.Level levels = 3;
  int levels_size() const;
  private:
  int _internal_levels_size() const;
  public:
  void clear_levels();
  ::wanderer::proto::Level* mutable_levels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wanderer::proto::Level >*
      mutable_levels();
  private:
  const ::wanderer::proto::Level& _internal_levels(int index) const;
  ::wanderer::proto::Level* _internal_add_levels();
  public:
  const ::wanderer::proto::Level& levels(int index) const;
  ::wanderer::proto::Level* add_levels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wanderer::proto::Level >&
      levels() const;

  // optional .wanderer.proto.SharedData shared = 2;
  bool has_shared() const;
  private:
  bool _internal_has_shared() const;
  public:
  void clear_shared();
  const ::wanderer::proto::SharedData& shared() const;
  PROTOBUF_MUST_USE_RESULT ::wanderer::proto::SharedData* release_shared();
  ::wanderer::proto::SharedData* mutable_shared();
  void set_allocated_shared(::wanderer::proto::SharedData* shared);
  private:
  const ::wanderer::proto::SharedData& _internal_shared() const;
  ::wanderer::proto::SharedData* _internal_mutable_shared();
  public:
  void unsafe_arena_set_allocated_shared(
      ::wanderer::proto::SharedData* shared);
  ::wanderer::proto::SharedData* unsafe_arena_release_shared();

  // optional int32 current_level_id = 1;
  bool has_current_level_id() const;
  private:
  bool _internal_has_current_level_id() const;
  public:
  void clear_current_level_id();
  ::PROTOBUF_NAMESPACE_ID::int32 current_level_id() const;
  void set_current_level_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_current_level_id() const;
  void _internal_set_current_level_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:wanderer.proto.Save)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wanderer::proto::Level > levels_;
  ::wanderer::proto::SharedData* shared_;
  ::PROTOBUF_NAMESPACE_ID::int32 current_level_id_;
  friend struct ::TableStruct_save_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SharedData

// optional .wanderer.proto.TimeOfDay time = 1;
inline bool SharedData::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || time_ != nullptr);
  return value;
}
inline bool SharedData::has_time() const {
  return _internal_has_time();
}
inline const ::wanderer::proto::TimeOfDay& SharedData::_internal_time() const {
  const ::wanderer::proto::TimeOfDay* p = time_;
  return p != nullptr ? *p : reinterpret_cast<const ::wanderer::proto::TimeOfDay&>(
      ::wanderer::proto::_TimeOfDay_default_instance_);
}
inline const ::wanderer::proto::TimeOfDay& SharedData::time() const {
  // @@protoc_insertion_point(field_get:wanderer.proto.SharedData.time)
  return _internal_time();
}
inline void SharedData::unsafe_arena_set_allocated_time(
    ::wanderer::proto::TimeOfDay* time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  time_ = time;
  if (time) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wanderer.proto.SharedData.time)
}
inline ::wanderer::proto::TimeOfDay* SharedData::release_time() {
  _has_bits_[0] &= ~0x00000001u;
  ::wanderer::proto::TimeOfDay* temp = time_;
  time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::wanderer::proto::TimeOfDay* SharedData::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:wanderer.proto.SharedData.time)
  _has_bits_[0] &= ~0x00000001u;
  ::wanderer::proto::TimeOfDay* temp = time_;
  time_ = nullptr;
  return temp;
}
inline ::wanderer::proto::TimeOfDay* SharedData::_internal_mutable_time() {
  _has_bits_[0] |= 0x00000001u;
  if (time_ == nullptr) {
    auto* p = CreateMaybeMessage<::wanderer::proto::TimeOfDay>(GetArenaForAllocation());
    time_ = p;
  }
  return time_;
}
inline ::wanderer::proto::TimeOfDay* SharedData::mutable_time() {
  ::wanderer::proto::TimeOfDay* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:wanderer.proto.SharedData.time)
  return _msg;
}
inline void SharedData::set_allocated_time(::wanderer::proto::TimeOfDay* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time));
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:wanderer.proto.SharedData.time)
}

// -------------------------------------------------------------------

// Save

// optional int32 current_level_id = 1;
inline bool Save::_internal_has_current_level_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Save::has_current_level_id() const {
  return _internal_has_current_level_id();
}
inline void Save::clear_current_level_id() {
  current_level_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Save::_internal_current_level_id() const {
  return current_level_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Save::current_level_id() const {
  // @@protoc_insertion_point(field_get:wanderer.proto.Save.current_level_id)
  return _internal_current_level_id();
}
inline void Save::_internal_set_current_level_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  current_level_id_ = value;
}
inline void Save::set_current_level_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_current_level_id(value);
  // @@protoc_insertion_point(field_set:wanderer.proto.Save.current_level_id)
}

// optional .wanderer.proto.SharedData shared = 2;
inline bool Save::_internal_has_shared() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || shared_ != nullptr);
  return value;
}
inline bool Save::has_shared() const {
  return _internal_has_shared();
}
inline void Save::clear_shared() {
  if (shared_ != nullptr) shared_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::wanderer::proto::SharedData& Save::_internal_shared() const {
  const ::wanderer::proto::SharedData* p = shared_;
  return p != nullptr ? *p : reinterpret_cast<const ::wanderer::proto::SharedData&>(
      ::wanderer::proto::_SharedData_default_instance_);
}
inline const ::wanderer::proto::SharedData& Save::shared() const {
  // @@protoc_insertion_point(field_get:wanderer.proto.Save.shared)
  return _internal_shared();
}
inline void Save::unsafe_arena_set_allocated_shared(
    ::wanderer::proto::SharedData* shared) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shared_);
  }
  shared_ = shared;
  if (shared) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wanderer.proto.Save.shared)
}
inline ::wanderer::proto::SharedData* Save::release_shared() {
  _has_bits_[0] &= ~0x00000001u;
  ::wanderer::proto::SharedData* temp = shared_;
  shared_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::wanderer::proto::SharedData* Save::unsafe_arena_release_shared() {
  // @@protoc_insertion_point(field_release:wanderer.proto.Save.shared)
  _has_bits_[0] &= ~0x00000001u;
  ::wanderer::proto::SharedData* temp = shared_;
  shared_ = nullptr;
  return temp;
}
inline ::wanderer::proto::SharedData* Save::_internal_mutable_shared() {
  _has_bits_[0] |= 0x00000001u;
  if (shared_ == nullptr) {
    auto* p = CreateMaybeMessage<::wanderer::proto::SharedData>(GetArenaForAllocation());
    shared_ = p;
  }
  return shared_;
}
inline ::wanderer::proto::SharedData* Save::mutable_shared() {
  ::wanderer::proto::SharedData* _msg = _internal_mutable_shared();
  // @@protoc_insertion_point(field_mutable:wanderer.proto.Save.shared)
  return _msg;
}
inline void Save::set_allocated_shared(::wanderer::proto::SharedData* shared) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete shared_;
  }
  if (shared) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::wanderer::proto::SharedData>::GetOwningArena(shared);
    if (message_arena != submessage_arena) {
      shared = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shared, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  shared_ = shared;
  // @@protoc_insertion_point(field_set_allocated:wanderer.proto.Save.shared)
}

// repeated .wanderer.proto.Level levels = 3;
inline int Save::_internal_levels_size() const {
  return levels_.size();
}
inline int Save::levels_size() const {
  return _internal_levels_size();
}
inline ::wanderer::proto::Level* Save::mutable_levels(int index) {
  // @@protoc_insertion_point(field_mutable:wanderer.proto.Save.levels)
  return levels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wanderer::proto::Level >*
Save::mutable_levels() {
  // @@protoc_insertion_point(field_mutable_list:wanderer.proto.Save.levels)
  return &levels_;
}
inline const ::wanderer::proto::Level& Save::_internal_levels(int index) const {
  return levels_.Get(index);
}
inline const ::wanderer::proto::Level& Save::levels(int index) const {
  // @@protoc_insertion_point(field_get:wanderer.proto.Save.levels)
  return _internal_levels(index);
}
inline ::wanderer::proto::Level* Save::_internal_add_levels() {
  return levels_.Add();
}
inline ::wanderer::proto::Level* Save::add_levels() {
  ::wanderer::proto::Level* _add = _internal_add_levels();
  // @@protoc_insertion_point(field_add:wanderer.proto.Save.levels)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wanderer::proto::Level >&
Save::levels() const {
  // @@protoc_insertion_point(field_list:wanderer.proto.Save.levels)
  return levels_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace wanderer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_save_2eproto
